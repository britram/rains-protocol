



Network Working Group                                        B. Trammell
Internet-Draft                                               C. Fehlmann
Intended status: Experimental                                 ETH Zurich
Expires: April 4, 2019                                  October 01, 2018


     RAINS (Another Internet Naming Service) Protocol Specification
                  draft-trammell-rains-protocol-latest

Abstract

   This document defines an alternate protocol for Internet name
   resolution, designed as a prototype to facilitate conversation about
   the evolution or replacement of the Domain Name System protocol.  It
   attempts to answer the question: "how would we design DNS knowing
   what we do now," on the background of a set of properties of an
   idealized Internet naming service.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 4, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Trammell & Fehlmann       Expires April 4, 2019                 [Page 1]

Internet-Draft                    RAINS                     October 2018


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
     1.1.  About This Document . . . . . . . . . . . . . . . . . . .   5
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  An Ideal Internet Naming Service  . . . . . . . . . . . . . .   7
     3.1.  Interfaces  . . . . . . . . . . . . . . . . . . . . . . .   7
     3.2.  Properties  . . . . . . . . . . . . . . . . . . . . . . .   8
       3.2.1.  Meaningfulness  . . . . . . . . . . . . . . . . . . .   9
       3.2.2.  Distinguishability  . . . . . . . . . . . . . . . . .   9
       3.2.3.  Minimal Structure . . . . . . . . . . . . . . . . . .   9
       3.2.4.  Federation of Authority . . . . . . . . . . . . . . .   9
       3.2.5.  Uniqueness of Authority . . . . . . . . . . . . . . .   9
       3.2.6.  Transparency of Authority . . . . . . . . . . . . . .  10
       3.2.7.  Revocability of Authority . . . . . . . . . . . . . .  10
       3.2.8.  Consensus on Root of Authority  . . . . . . . . . . .  10
       3.2.9.  Authenticity of Delegation  . . . . . . . . . . . . .  10
       3.2.10. Authenticity of Response  . . . . . . . . . . . . . .  10
       3.2.11. Authenticity of Negative Response . . . . . . . . . .  11
       3.2.12. Dynamic Consistency . . . . . . . . . . . . . . . . .  11
       3.2.13. Explicit Inconsistency  . . . . . . . . . . . . . . .  11
       3.2.14. Global Invariance . . . . . . . . . . . . . . . . . .  12
       3.2.15. Availability  . . . . . . . . . . . . . . . . . . . .  12
       3.2.16. Lookup Latency  . . . . . . . . . . . . . . . . . . .  12
       3.2.17. Bandwidth Efficiency  . . . . . . . . . . . . . . . .  13
       3.2.18. Query Linkability . . . . . . . . . . . . . . . . . .  13
       3.2.19. Explicit Tradeoff . . . . . . . . . . . . . . . . . .  13
       3.2.20. Trust in Infrastructure . . . . . . . . . . . . . . .  13
     3.3.  Observations  . . . . . . . . . . . . . . . . . . . . . .  14
       3.3.1.  Delegation and redirection are separate operations  .  14
       3.3.2.  Unicode alone may not be sufficient for
               distinguishable names . . . . . . . . . . . . . . . .  14
       3.3.3.  Implicit inconsistency makes global invariance
               challenging to verify . . . . . . . . . . . . . . . .  14
   4.  Architecture  . . . . . . . . . . . . . . . . . . . . . . . .  15
   5.  Information Model . . . . . . . . . . . . . . . . . . . . . .  15
     5.1.  Assertion . . . . . . . . . . . . . . . . . . . . . . . .  15
       5.1.1.  Context in Assertions . . . . . . . . . . . . . . . .  17
       5.1.2.  Signatures in Assertions  . . . . . . . . . . . . . .  19
       5.1.3.  Semantic of nonexistence proofs . . . . . . . . . . .  19
       5.1.4.  Shards and Probabilistic Shards (P-Shards)  . . . . .  19
   6.  Zone  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  21
     6.1.  Zone-Reflexive Assertions . . . . . . . . . . . . . . . .  22
     6.2.  Query . . . . . . . . . . . . . . . . . . . . . . . . . .  22
       6.2.1.  Context in Queries  . . . . . . . . . . . . . . . . .  23



Trammell & Fehlmann       Expires April 4, 2019                 [Page 2]

Internet-Draft                    RAINS                     October 2018


       6.2.2.  Answers to Queries  . . . . . . . . . . . . . . . . .  23
     6.3.  Assertion Update Query  . . . . . . . . . . . . . . . . .  24
       6.3.1.  Answers to Assertion Update Queries . . . . . . . . .  24
     6.4.  Nonexistence Update Query . . . . . . . . . . . . . . . .  24
       6.4.1.  Answers to Nonexistence Update Queries  . . . . . . .  25
     6.5.  Address to Object Mapping . . . . . . . . . . . . . . . .  25
       6.5.1.  Context in Address Assertions . . . . . . . . . . . .  27
   7.  CBOR Data Model . . . . . . . . . . . . . . . . . . . . . . .  27
     7.1.  Symbol Table  . . . . . . . . . . . . . . . . . . . . . .  28
     7.2.  Message . . . . . . . . . . . . . . . . . . . . . . . . .  29
     7.3.  Message Section header  . . . . . . . . . . . . . . . . .  29
     7.4.  Assertion body  . . . . . . . . . . . . . . . . . . . . .  30
       7.4.1.  Sorting Assertions  . . . . . . . . . . . . . . . . .  31
     7.5.  Shard body  . . . . . . . . . . . . . . . . . . . . . . .  31
       7.5.1.  Sorting Shards  . . . . . . . . . . . . . . . . . . .  33
     7.6.  P-Shard body  . . . . . . . . . . . . . . . . . . . . . .  33
       7.6.1.  Sorting P-Shard . . . . . . . . . . . . . . . . . . .  34
     7.7.  Zone body . . . . . . . . . . . . . . . . . . . . . . . .  34
     7.8.  Query body  . . . . . . . . . . . . . . . . . . . . . . .  35
     7.9.  Assertion Update Query body . . . . . . . . . . . . . . .  37
     7.10. Nonexistence Update Query body  . . . . . . . . . . . . .  38
     7.11. Address Assertion body  . . . . . . . . . . . . . . . . .  39
     7.12. Address Query body  . . . . . . . . . . . . . . . . . . .  39
     7.13. Notification body . . . . . . . . . . . . . . . . . . . .  40
     7.14. Object  . . . . . . . . . . . . . . . . . . . . . . . . .  42
       7.14.1.  Certificate information format . . . . . . . . . . .  44
       7.14.2.  Name expression format . . . . . . . . . . . . . . .  46
     7.15. Data structures . . . . . . . . . . . . . . . . . . . . .  47
       7.15.1.  Bloom Filter Bit String  . . . . . . . . . . . . . .  48
     7.16. Tokens in queries and messages  . . . . . . . . . . . . .  49
     7.17. Signatures, delegation keys, and RAINS infrastructure
           keys  . . . . . . . . . . . . . . . . . . . . . . . . . .  49
       7.17.1.  EdDSA signature and public key format  . . . . . . .  51
       7.17.2.  ECDSA signature and public key format  . . . . . . .  52
     7.18. Capabilities  . . . . . . . . . . . . . . . . . . . . . .  52
   8.  Canonical signing format  . . . . . . . . . . . . . . . . . .  53
   9.  RAINS Protocol Definition . . . . . . . . . . . . . . . . . .  53
     9.1.  Bootstrapping . . . . . . . . . . . . . . . . . . . . . .  54
     9.2.  Allowed Inconsistencies . . . . . . . . . . . . . . . . .  54
     9.3.  Message processing  . . . . . . . . . . . . . . . . . . .  55
     9.4.  Message Transmission  . . . . . . . . . . . . . . . . . .  62
     9.5.  Message Limits  . . . . . . . . . . . . . . . . . . . . .  63
     9.6.  Runtime Consistency Checking  . . . . . . . . . . . . . .  63
     9.7.  Integrity and Confidentiality Protection  . . . . . . . .  64
     9.8.  Cooperative Delegation Distribution . . . . . . . . . . .  64
   10. RAINS Client Protocol . . . . . . . . . . . . . . . . . . . .  64
   11. RAINS Publication Protocol  . . . . . . . . . . . . . . . . .  65
   12. Deployment Considerations . . . . . . . . . . . . . . . . . .  65



Trammell & Fehlmann       Expires April 4, 2019                 [Page 3]

Internet-Draft                    RAINS                     October 2018


     12.1.  Assertion Lifetime Management  . . . . . . . . . . . . .  65
     12.2.  Secret Key Management  . . . . . . . . . . . . . . . . .  66
     12.3.  Public Key Management  . . . . . . . . . . . . . . . . .  66
       12.3.1.  Key Phase and Key Rotation . . . . . . . . . . . . .  66
       12.3.2.  Next Key Assertions  . . . . . . . . . . . . . . . .  67
     12.4.  Unsigned Contained Assertions  . . . . . . . . . . . . .  67
     12.5.  Query Service Discovery  . . . . . . . . . . . . . . . .  68
     12.6.  Transition using translation between RAINS and DNS
            information models . . . . . . . . . . . . . . . . . . .  68
   13. Experimental Design and Evaluation  . . . . . . . . . . . . .  69
   14. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  70
   15. Security Considerations . . . . . . . . . . . . . . . . . . .  70
     15.1.  Server state exhaustion  . . . . . . . . . . . . . . . .  71
     15.2.  Query relay attacks  . . . . . . . . . . . . . . . . . .  71
   16. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  71
   17. References  . . . . . . . . . . . . . . . . . . . . . . . . .  71
     17.1.  Normative References . . . . . . . . . . . . . . . . . .  71
     17.2.  Informative References . . . . . . . . . . . . . . . . .  72
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  75

1.  Introduction

   This document defines an experimental protocol for providing Internet
   name resolution services, as a replacement for DNS, called RAINS
   (RAINS, Another Internet Naming Service).  It is designed as a
   prototype to facilitate conversation about the evolution or
   replacement of the Domain Name System protocol, and was developed as
   a name resolution system for the SCION ("Scalability, Control, and
   Isolation on Next-Generation Networks") future Internet architecture
   [SCION].  It attempts to answer the question: "how would we design
   the DNS knowing what we do now," on the background of the properties
   of an ideal naming service defined in Section 3.

   Its architecture (Section 4) and information model (Section 5) are
   largely compatible with the existing Domain Name System.  However, it
   does take several radical departures from DNS as presently defined
   and implemented:

   o  Delegation from a superordinate zone to a subordinate zone is done
      solely with cryptography: a superordinate defines the key(s) that
      are valid for signing assertions in the subordinate during a
      particular time interval.  Assertions about names can therefore
      safely be served from any infrastructure.

   o  All time references in RAINS are absolute: instead of a time to
      live, each assertion's temporal validity is defined by the
      temporal validity of the signature(s) on it.




Trammell & Fehlmann       Expires April 4, 2019                 [Page 4]

Internet-Draft                    RAINS                     October 2018


   o  All assertions have validity within a specific context.  A context
      determines the rules for chaining signatures to verify validity of
      an assertion.  The global context is a special case of context,
      which uses chains from the global naming root key.  The use of
      context explicitly separates global usage of the DNS from local
      usage thereof, and allows other application-specific naming
      constraints to be bound to names; see Section 5.1.1.  Queries are
      valid in one or more contexts, with specific rules for determining
      which assertions answer which queries; see Section 6.2.1.

   o  There is an explicit separation between registrant-level names and
      sub-registrant-level names, and explicit information about
      registrars and registrants available in the naming system at
      runtime.

   o  Sets of valid characters and rules for valid names are defined on
      a per-zone basis, and can be verified at runtime.

   o  Reverse lookups are done using a completely separate tree,
      supporting delegations of any prefix length, in accordance with
      CIDR [RFC4632] and the IPv6 addressing architecture [RFC4291].

   Instead of using a custom binary framing as DNS, RAINS uses Concise
   Binary Object Representation [RFC7049], partially in an effort to
   make implementations easier to verify and less likely to contain
   potentially dangerous parser bugs [PARSER-BUGS].  As with DNS, CBOR
   messages can be carried atop any number of substrate protocols.
   RAINS is presently defined to use TLS over persistent TCP connections
   (see Section 9).

1.1.  About This Document

   The source of this document is available in the repository
   https://github.com/britram/rains-prototype, and a rendered working
   copy is available at https://britram.github.io/rains-prototype.  Open
   issues can be seen and discussed at https://github.com/britram/rains-
   prototype/issues.

2.  Terminology

   The terms MUST, MUST NOT, SHOULD, SHOULD NOT, and MAY, when they
   appear in all-capitals, are to be interpreted as defined in
   [RFC2119].

   In addition, the following terms are used in this document as
   defined:

   o  Subject: A name or address about which Assertions can be made.



Trammell & Fehlmann       Expires April 4, 2019                 [Page 5]

Internet-Draft                    RAINS                     October 2018


   o  Object: A type/value pair of information about a name within an
      Assertion.

   o  Assertion: A mapping between a Subject and an Object, signed by
      the Authority for the namespace containing that Subject.  See
      Section 5.1.

   o  Authority: An entity that has the right to determine which
      Assertions exist within its Zone

   o  Delegation: An Assertion that an Authority has given the right to
      make assertions about the Assertions within the part of a
      namespace identified by a Subject to a subordinate Authority, by
      virtue of holding a secret key which can generate signatures
      verifiable using a public key associated with a delegation to the
      Zone.

   o  Zone: A portion of a namespace rooted at a given point in the
      namespace hierarchy.  A Zone contains all the Assertions about
      Subjects tha exist within its part of the namespace.

   o  Query: An expression of interest in certain types of objects
      pertaining to a Subject name in one or more contexts.  See
      Section 6.2.

   o  Context: Additional information about the scope in which an
      Assertion or Query is valid.  See Section 5.1.1 and Section 6.2.1.

   o  Shard: A group of assertions common to a zone and valid at a given
      point in time, scoped to a lexicographic range of Subject names
      with in the Zone, for purposes of proving non-existence of an
      Assertion.  Shards may be encoded to provide either absolute proof
      or probabalistic assurance of non-existence.  See Section 5.1.4.

   o  Assertion Update Query: An expression of interest about the
      current validity status of an unexpired assertion one already has.

   o  Nonexistence Update Query: An expression of interest about the
      current validity status of an unexpired shard or zone one already
      has.

   o  RAINS Message: Unit of exchange in the RAINS protocol, containing
      assertions, shards, zones, queries, and notifications.  See
      Section 7.2.

   o  Notification: A RAINS-internal message section carrying
      information about the operation of the protocol itself.  See
      Section 7.13.



Trammell & Fehlmann       Expires April 4, 2019                 [Page 6]

Internet-Draft                    RAINS                     October 2018


   o  Authority Service: A service provided by a RAINS Server for
      publishing assertions by an authority.  See Section 4.

   o  Query Service: A service provided by a RAINS Server for answering
      queries on behalf of a RAINS Client.  See Section 4.

   o  Intermediary Service: A service provided by a RAINS Server for
      answering queries and providing temporary storage for assertions
      on behalf of other RAINS Servers.  See Section 4.

   o  RAINS Server: A server that speaks the RAINS Protocol, and
      provides on or more services on behalf of other RAINS Servers and/
      or RAINS Clients.  See Section 4.

   o  RAINS Client: A client that uses the Query Service of one or more
      RAINS Servers to retrieve assertions on behalf of applications
      that wish to connect to named services in the Internet.

3.  An Ideal Internet Naming Service

   We begin by returning to first principles, to determine the
   dimensions of the design space of desirable properties of an
   Internet-scale naming service.  We recognize that the choices made in
   the evolution of the DNS since its initial design are only one path
   through the design space of Internet-scale naming services.  Many
   other naming services have been proposed, though none has been
   remotely as successful for general-purpose use in the Internet.  The
   following subsections outline the space more generally.  It is, of
   course, informed by decades of experience with the DNS, but
   identifies a few key gaps which we then aim to address directly with
   the design of RAINS.

   Section 3.1 defines the set of operations a naming service should
   provide for queriers and authorities, Section 3.2 defines a set of
   desirable properties of the provision of this service, and
   Section 3.3 examines implications of these properties.

3.1.  Interfaces

   At its core, a naming service must provide a few basic functions for
   queriers, associating a Subject of a query with information about
   that subject.  The information available from a naming service is
   that which is necessary for a querier to establish a connection with
   some other entity in the Internet, given a name identifying it.

   o  Name to Address: given a Subject name, the naming service returns
      a set of addresses associated with that name, if such an
      association exists, where the association is determined by the



Trammell & Fehlmann       Expires April 4, 2019                 [Page 7]

Internet-Draft                    RAINS                     October 2018


      authority for that name.  Names may be associated with addresses
      in one or more address families (e.g.  IP version 4, IP version
      6).  A querier may specify which address families it is interested
      in receiving addresses for, and the naming system treats all
      address families equally.  This mapping is implemented in the DNS
      protocol via the A and AAAA RRTYPES.

   o  Address to Name: given an Subject address, the naming service
      returns a set of names associated with that address, if such an
      association exists, where the association is determined by the
      authority for that address.  This mapping is implemented in the
      DNS protocol via the PTR RRTYPE.  IPv4 mappings exist within the
      in-addr.arpa. zone, and IPv6 mappings in the ip6.arpa. zone.
      These mappings imply a limited set of boundaries on which
      delegations may be made (octet boundaries for IPv4, nybble
      boundaries for IPv6).

   o  Name to Name: given a Subject name, the naming service returns a
      set of object names associated with that name, if such an
      association exists, where the association is determined by the
      authority for the subject name.  This mapping is implemented in
      the DNS protocol via the CNAME RRTYPE.  CNAME does not allow the
      association of multiple object names with a single subject, and
      CNAME may not combine with other RRTYPEs (e.g.  NS, MX)
      arbitrarily.

   o  Name to Auxiliary Information: given a Subject name, the naming
      service returns other auxiliary information associated with that
      name that is useful for establishing communication over the
      Internet with the entities associated with that name.  Most of the
      other RRTYPES in the DNS protocol implement these sort of
      mappings.

   The query interface is not the only interface to the naming service:
   the interface a naming service presents to an Authority allows
   updates to the set of Assertions and Delegations in that Authority's
   namespace.  Updates consist of additions of, changes to, and
   deletions of Assertions and Delegations.  In the present DNS, this
   interface consists of the publication of a new zone file with an
   incremented version number, but other authority interfaces are
   possible.

3.2.  Properties

   The following properties are desirable in a naming service providing
   the functions in Section 3.1.





Trammell & Fehlmann       Expires April 4, 2019                 [Page 8]

Internet-Draft                    RAINS                     October 2018


3.2.1.  Meaningfulness

   A naming service must provide the ability to name objects that its
   human users find more meaningful than the objects themselves.

3.2.2.  Distinguishability

   A naming service must make it possible to guarantee that two
   different names are easily distinguishable from each other by its
   human users.

3.2.3.  Minimal Structure

   A naming service should impose as little structure on the names it
   supports as practical in order to be universally applicable.  Naming
   services that impose a given organizational structure on the names
   expressible using the service will not translate well to societies
   where that organizational structure is not prevalent.

3.2.4.  Federation of Authority

   An Authority can delegate some part of its namespace to some other
   subordinate Authority.  This property allows the naming service to
   scale to the size of the Internet, and leads to a tree-structured
   namespace, where each Delegation is itself identified with a Subject
   at a given level in the namespace.

   In the DNS protocol, this federation of authority is implemented
   through delegation using the NS RRTYPE, redirecting queries to
   subordinate authorities recursively to the final authority.  When
   DNSSEC is used, the DS RRTYPE is used to verify this delegation.

3.2.5.  Uniqueness of Authority

   For a given Subject, there is a single Authority that has the right
   to determine the Assertions and/or Delegations for that subject.  The
   unitary authority for the root of the namespace tree may be special,
   though; see Section 3.2.8.

   In the DNS protocol as deployed, unitary authority is approximated by
   the entity identified by the SOA RRTYPE.  The existence of
   registrars, which use the Extensible Provisioning Protocol (EPP)
   [RFC5730] to modify entries in the zones under the authority of a
   top-level domain registry, complicates this somewhat.







Trammell & Fehlmann       Expires April 4, 2019                 [Page 9]

Internet-Draft                    RAINS                     October 2018


3.2.6.  Transparency of Authority

   A querier can determine the identity of the Authority for a given
   Assertion.  An Authority cannot delegate its rights or
   responsibilities with respect to a subject without that Delegation
   being exposed to the querier.

   In DNS, the authoritative name server(s) to which a query is
   delegated via the NS RRTYPE are known.  However, we note that in the
   case of authorities which delegate the ability to write to the zone
   to other entities (i.e., the registry-registrar relationship), the
   current DNS provides no facility for a querier to understand on whose
   behalf an authoritative assertion is being made; this information is
   instead available via WHOIS.  To our knowledge, no present DNS name
   servers use WHOIS information retrieved out of band to make policy
   decisions.

3.2.7.  Revocability of Authority

   An ideal naming service allows the revocation and replacement of an
   authority at any level in the namespace, and supports the revocation
   and replacement of authorities with minimal operational disruption.

   The current DNS allows the replacement of any level of delegation
   except the root through changes to the appropriate NS and DS records.
   Authority revocation in this case is as consistent as any other
   change to the DNS.

3.2.8.  Consensus on Root of Authority

   Authority at the top level of the namespace tree is delegated
   according to a process such that there is universal agreement
   throughout the Internet as to the subordinates of those Delegations.

3.2.9.  Authenticity of Delegation

   Given a Delegation from a superordinate to a subordinate Authority, a
   querier can verify that the superordinate Authority authorized the
   Delegation.

   Authenticity of delegation in DNS is provided by DNSSEC [RFC4033].

3.2.10.  Authenticity of Response

   The authenticity of every answer is verifiable by the querier.  The
   querier can confirm that the Assertion returned in the answer is
   correct according to the Authority for the Subject of the query.




Trammell & Fehlmann       Expires April 4, 2019                [Page 10]

Internet-Draft                    RAINS                     October 2018


   Authenticity of response in DNS is provided by DNSSEC.

3.2.11.  Authenticity of Negative Response

   Some queries will yield no answer, because no such Assertion exists.
   In this case, the querier can confirm that the Authority for the
   Subject of the query asserts this lack of Assertion.

   Authenticity of negative response in DNS is provided by DNSSEC.

3.2.12.  Dynamic Consistency

   Consistency in a naming service is important.  The naming service
   should provide the most globally consistent view possible of the set
   of Assertions that exist at a given point in time, within the limits
   of latency and bandwidth tradeoffs.

   When an Authority makes changes to an Assertion, every query for a
   given Subject returns either the new valid result or a previously
   valid result, with known and/or predictable bounds on "how
   previously".  Given that additions of, changes to, and deletions of
   Asseretion may have different operational causes, different bounds
   may apply to different operations.

   The time-to-live (TTL) on a resource record in DNS provides a
   mechanism for expiring old resource records.  We note that this
   mechanism makes additions to the system propagate faster than changes
   and deletions, which may not be a desirable property.  However, as no
   context information is explicitly available in DNS, the DNS cannot be
   said to be dynamically consistent, as different implicitly
   inconsistent views of an Assertion may be persistent.

3.2.13.  Explicit Inconsistency

   Some techniques require giving different answers to different
   queries, even in the absence of changes: the stable state of the
   namespace is not globally consistent.  This inconsistency should be
   explicit: a querier can know that an answer might be dependent on its
   identity, network location, or other factors.

   One example of such desirable inconsistency is the common practice of
   "split horizon" DNS, where an organization makes internal names
   available on its own network, but only the names of externally-
   visible subjects available to the Internet at large.

   Another is the common practice of DNS-based content distribution, in
   which an authoritative name server gives different answers for the
   same query depending on the network location from which the query was



Trammell & Fehlmann       Expires April 4, 2019                [Page 11]

Internet-Draft                    RAINS                     October 2018


   received, or depending on the subnet in which the end client
   originating a query is located (via the EDNS Client Subnet extension
   {RFC7871}}).  Such inconsistency based on client identity or network
   address may increase query linkability (see Section 3.2.18).

   These forms of inconsistency are implicit, not explicit, in the
   current DNS.  We note that while DNS can be deployed to allow
   essentially unlimited kinds of inconsistency in its responses, there
   is no protocol support for a query to express the kind of consistency
   it desires, or for a response to explicitly note that it is
   inconsistent.  [RFC7871] does allow a querier to note that it would
   specifically like the view of the state of the namespace offered to a
   certain part of the network, and as such can be seen as inchoate
   support for this property.

3.2.14.  Global Invariance

   An Assertion which is not intended to be explicitly inconsistent by
   the Authority issuing it must return the same result for every Query
   for it, regardless of the identity or location of the querier.

   This property is not provided by DNS, as it depends on the robust
   support on the Explicit Inconsistency property above.  Examples of
   global invariance failures include geofencing and DNS-based
   censorship ordered by a local jurisdiction.

3.2.15.  Availability

   The naming service as a whole is resilient to failures of individual
   nodes providing the naming service, as well as to failures of links
   among them.  Intentional prevention of successful, authenticated
   query by an adversary should be as hard as practical.

   The DNS protocol was designed to be highly available through the use
   of secondary nameservers.  Operational practices (e.g. anycast
   deployment) also increase the availability of DNS as currently
   deployed.

3.2.16.  Lookup Latency

   The time for the entire process of looking up a name and other
   necessary associated data from the point of view of the querier,
   amortized over all queries for all connections, should not
   significantly impact connection setup or resumption latency.







Trammell & Fehlmann       Expires April 4, 2019                [Page 12]

Internet-Draft                    RAINS                     October 2018


3.2.17.  Bandwidth Efficiency

   The bandwidth cost for looking up a name and other associated data
   necessary for establishing communication with a given Subject, from
   the point of view of the querier, amortized over all queries for all
   connections, should not significantly impact total bandwidth demand
   for an application.

3.2.18.  Query Linkability

   It should be costly for an adversary to monitor the infrastructure in
   order to link specific queries to specific queriers.

   DNS over TLS [RFC7858] and DNS over DTLS [RFC8094] provide this
   property between a querier and a recursive resolver; mixing by the
   recursive helps with mitigating upstream linkability.

3.2.19.  Explicit Tradeoff

   A querier should be able to indicate the desire for a benefit with
   respect to one performance property by accepting a tradeoff in
   another, including:

   o  Reduced latency for reduced dynamic consistency

   o  Increased dynamic consistency for increased latency

   o  Reduced request linkability for increased latency and/or reduced
      dynamic consistency

   o  Reduced aggregate bandwidth use for increased latency and/or
      reduced dynamic consistency

   There is no support for explicit tradeoffs in performance properties
   available to clients in the present DNS.

3.2.20.  Trust in Infrastructure

   A querier should not need to trust any entity other than the
   authority as to the correctness of association information provided
   by the naming service.  Specifically, the querier should not need to
   trust any intermediary of infrastructure between itself and the
   authority, other than that under its own control.

   DNS provides this property with DNSSEC.  However, the lack of
   mandatory DNSSEC, and the lack of a viable transition strategy to
   mandatory DNSSEC (see [I-D.trammell-optional-security-not]), means




Trammell & Fehlmann       Expires April 4, 2019                [Page 13]

Internet-Draft                    RAINS                     October 2018


   that trust in infrastructure will remain necessary for DNS even with
   large scale DNSSEC deployment.

3.3.  Observations

   On a cursory examination, many of the properties of our ideal name
   service can be met, or could be met, by the present DNS protocol or
   extensions thereto.  We note that there are further possibilities for
   the future evolution of naming services meeting these properties.
   This section contains random observations that might inform future
   work.

3.3.1.  Delegation and redirection are separate operations

   Any system which can provide the authenticity properties enumerated
   above is freed from one of the design characteristics of the present
   domain name system: the requirement to bind a zone of authority to a
   specific set of authoritative servers.  Since the authenticity of
   delegation must be a protected by a chain of signatures back to the
   root of authority, the location within the infrastructure where an
   authoritative mapping "lives" is no longer bound to a specific name
   server.  While the present design of DNS does have its own
   scalability advantages, this implication allows a much larger design
   space to be explored for future name service work, as a Delegation
   need not always be implemented via redirection to another name
   server.

3.3.2.  Unicode alone may not be sufficient for distinguishable names

   Allowing names to be encoded in Unicode goes a long way toward
   meeting the meaningfulness property (see Section 3.2.1) for the
   majority of speakers of human languages.  However, as noted by the
   Internet Architecture Board (see [IAB-UNICODE7]) and discussed at the
   Locale-free Unicode Identifiers (LUCID) BoF at IETF 92 in Dallas in
   March 2015 (see [LUCID]), it is not in the general case sufficient
   for distinguishability (see Section 3.2.2).  An ideal naming service
   may therefore have to supplement Unicode by providing runtime support
   for disambiguation of queries and assertions where the results may be
   indistinguishable.

3.3.3.  Implicit inconsistency makes global invariance challenging to
        verify

   DNS does not provide a generalized form of explicit inconsistency, so
   efforts to verify global invariance, or rather, to discover
   Assertions for which global invariance does not hold, are necessarily
   effort-intensive and dynamic.  For example, the Open Observatory of
   Network Interference performs DNS consistency checking from multiple



Trammell & Fehlmann       Expires April 4, 2019                [Page 14]

Internet-Draft                    RAINS                     October 2018


   volunteer vantage points for a set of targeted (i.e., likely to be
   globally variant) domain names; see
   https://ooni.torproject.org/nettest/dns-consistency/.

4.  Architecture

   The RAINS architecture is simple, and resembles the architecture of
   DNS.  A RAINS Server is an entity that provides transient and/or
   permanent storage for assertions about names, and a lookup function
   that finds assertions for a given query about a name, either by
   searching local storage or by delegating to another RAINS server.
   RAINS servers can take on any or all of three roles:

   o  authority service, acting on behalf of an authority to ensure
      properly signed assertions are made available to the system
      (equivalent to an authoritative server in DNS);

   o  query service, acting on behalf of a client to answer queries with
      relevant assertions (equivalent to a recursive resolver in DNS),
      and to validate assertions on the client's behalf; and/or

   o  intermediary service, acting on behalf of neither but providing
      storage and lookup for assertions with certain properties for
      query and authority servers (partially replacing, but not really
      equivalent to, caching resolvers in DNS).

   RAINS Servers use the RAINS Protocol defined in this document to
   exchange queries and assertions.  RAINS Clients use a subset variant
   of the RAINS Protocol (called the RAINS Client Protocol) to interact
   with RAINS Servers providing query services on their behalf.

5.  Information Model

   The RAINS Protocol is based on an information model built around two
   kinds of information: Assertions and Queries.  An Assertion contains
   some information about a name or address, and a Query contains a
   request for information about a name or address.  The information
   model in this section omits information elements required by the
   resolution mechanism itself; these are defined in more detail in
   Section 7 and Section 9.

5.1.  Assertion

   An Assertion is a signed statement about a mapping from a subject
   name to one or several object values of the same type, and consists
   of the following elements:





Trammell & Fehlmann       Expires April 4, 2019                [Page 15]

Internet-Draft                    RAINS                     October 2018


   o  Context: name of the context in which the assertion is valid; see
      Section 5.1.1 below.

   o  Subject: name about which the assertion is made.

   o  Zone: name of the zone in which the assertion is made.  The fully
      qualified name of the subject is made by appending the zone name
      to the subject name with a domain name separator ('.').

   o  Type: the type of information about the Subject contained in the
      assertion.  Each Assertion is about a single type of data.

   o  Object: the data of the indicated type associated with the Subject

   o  Signatures: one or more signatures generated by the authority for
      the Assertion.  Signatures contain a time interval during which
      they are considered valid.  See Section 5.1.2 below.

   The Types supported for each assertion are:

   o  Delegation: the authority associated with the zone identified by
      the name (roughly equivalent to the DNSSEC DS RRTYPE).  The Object
      contains a public key by which the authority can be identified.

   o  Redirection: The name(s) of one or more RAINS servers providing
      authority service for the authority associated with the zone
      (roughly equivalent to the DNSSEC NS RRTYPE, but not always
      consulted directly during resolution).  The Object contains a set
      of names.

   o  Address: one or more addresses associated with the name (replaces
      DNS A and AAAA RTYPEs).  The Object contains a set of Addresses.
      An Address is an {address-family, value} tuple.

   o  Service-Info: one or more layer 4 ports and hostnames associated
      with a service name (replaces DNS SRV RRTYPE).  The object
      contains a {hostname, port-number, priority} tuple.

   o  Name: one or more names associated with the name (roughly
      equivalent to DNS CNAME).  The Object contains a set of names.

   o  Certificate: a certificate which must appear at a specified
      location in the certificate chain presented on a connection
      attempt with the named entity (roughly equivalent to DNS TLSA).

   o  Zone-Nameset: an expression of the set of names allowed within a
      zone; e.g.  Unicode scripts or codepages in which names in the
      zone may be issued.  This allows a zone to set policy on names in



Trammell & Fehlmann       Expires April 4, 2019                [Page 16]

Internet-Draft                    RAINS                     October 2018


      support of the distinguishability property (Section 3.2.2) that
      can be checked by RAINS servers at runtime.  An assertion about a
      Subject within a Zone whose name is not allowed by a valid signed
      Zone-Nameset expression is taken to be invalid, even if it has a
      valid signature.

   o  Zone-Registrar: Information about the organization that caused a
      Subject name to exist, for registrant-level names.

   o  Zone-Registrant: Information about the organization responsible
      for a Subject name, for registrant-level names.

   o  Infrastructure Key: Information about public keys used for object
      security within the RAINS infrastructure itself.  The Object
      contains a public key by which a named RAINS server can be
      identified.

   o  External Key: Information about public keys used for additional
      signatures on assertions.  The external key is usually discovered
      outside RAINS, and can be verified by comparison with the key
      stored in a RAINS assertion.  The Object contains an external
      public key.

   o  Subsequent Key: Assertions about delegations are made by a zone's
      superordinate.  A zone may request that its superordinate delegate
      to a new public key by publishing a subsequent key assertion
      (replacing the mechanism implemented by CDS/CDNSKEY in DNS).

   For a given {subject, type} tuple, multiple assertions can be valid
   at a given point in time; the union of the object values of all of
   these assertions is considered to be the set of valid values at that
   point in time.

5.1.1.  Context in Assertions

   Assertion contexts are used to determine the validity of the
   signature by the declared authority as follows:

   o  The global context is identified by the special context name '.'.
      Assertions in the global context are signed by the authority for
      the subject name.  For example, assertions about the name
      'ethz.ch.' in the global context are only valid if signed by the
      relevant authority which is either 'ethz.ch.', 'ch.', or '.'
      depending on the value of the subject name of the assertion.

   o  A local context is associated with a given authority.  The
      authority-part and the context-part of a local context name are
      divided by a context marker ('cx-').  The authority-part directly



Trammell & Fehlmann       Expires April 4, 2019                [Page 17]

Internet-Draft                    RAINS                     October 2018


      identifies the authority whose key was used to sign the assertion;
      assertions within a local context are only valid if signed by the
      identified authority.  Authorities have complete control over how
      the contexts under their namespaces are arranged, and over the
      names within those contexts.  Both the authority-part and the
      context-part must end with a '.'.

   Assertion context is the mechanism by which RAINS provides explicit
   inconsistency ({{explicit-inconsistency}).  Some examples illustrate
   how context works:

   o  For the common split-DNS case, an enterprise could place names for
      machines on its local networks within a separate context.  E.g., a
      workstation could be named 'simplon.cab.inf.ethz.ch.' within the
      context 'staff-workstations.cx-inf.ethz.ch.'  Assertions about
      this name would be signed by the authority for 'inf.ethz.ch.'.
      Here, the context serves simply as a marker, without enabling an
      alternate signature chain: note that the name
      'simplon.cab.inf.ethz.ch' could at the same time be validly signed
      in the global context by the authority over that name to allow
      external users access this workstation.  The local context simply
      marks this assertion as internal.  This allows a client making
      requests of local names to know they are local, and for local
      resolvers to manage visibility of assertions outside the
      enterprise: explicit context makes accidental leakage of both
      queries and assertions easier to detect and avoid.

   o  Contexts make captive-portal interactions more explicit: a captive
      portal resolver could respond to a query for a common website
      (e.g. www.google.ch) with a signed response directed at the
      captive portal, but within a context identifying the location as
      well as the ISP (e.g.  sihlquai.zurich.ch.cx-
      starbucks.access.some-isp.net.).  This response will be signed by
      the authority for 'starbucks.access.some-isp.net.'.  This
      signature achieves two things: first, the client knows the result
      for www.google.ch is not globally valid; second, it can present
      the user with some indication as to the identity of the captive
      portal it is connected to.

   Further examples showing how context can be used in queries as well
   are given in Section 6.2.1 below.

   Developing conventions for assertion contexts for different
   situations will require implementation and deployment experience, and
   is a subject for future work.






Trammell & Fehlmann       Expires April 4, 2019                [Page 18]

Internet-Draft                    RAINS                     October 2018


5.1.2.  Signatures in Assertions

   A signature over an assertion contains the following information
   elements:

   o  Algorithm: identifier of the algorithm used to generate the
      signature.

   o  Keyspace: identifier of the key space used to generate the
      signature, i.e. how the key to verify the signature should be
      retrieved.  RAINS supports an internal keyspace, but allows
      signatures using externally obtained keys to appear on assertions
      for additional security.

   o  Keyphase: phase of the key used to generate the signature.  Since
      multiple keys may be valid for a given authority at a given point
      in time, this allows the correct key to be retrieved directly.

   o  Valid-Since: a timestamp of the start of validity of this
      signature.

   o  Valid-Until: a timestamp of the end of validity of this signature.

   o  Signature: the cryptographic signature itself, whose format is
      determined by the algorithm used.

   The signature protects all the information in an assertion as well as
   its own algorithm identifier, keyspace identifier, key phase, valid-
   since, and valid-until values; it does not protect other signatures
   on the assertion.

5.1.3.  Semantic of nonexistence proofs

   Shards, P-Shards and zones can all be used to prove nonexistence
   during their validity.  But to allow change to happen frequently and
   to have a dynamic system, an assertion might be created, altered,
   expired or revoked during the validity period of a shard, P-Shard or
   zone, leading to an inconsistency.  Thus, a section proving
   nonexistence only captures the state at the point in time when it was
   signed.  To make sure that the content of a shard, P-Shard or zone is
   still accurate, a nonexistence update query Section 6.4 must be sent
   to the server having authority over that name.

5.1.4.  Shards and Probabilistic Shards (P-Shards)

   A shard is exclusively used to prove non-existence of a name and type
   in a given context and range.  It allows zone authorities with many
   names to make nonexistence proofs when their zone's content is too



Trammell & Fehlmann       Expires April 4, 2019                [Page 19]

Internet-Draft                    RAINS                     October 2018


   large to fit in a message, see Section 9.5.  A shard is a sorted set
   of assertions within the same zone and context, protected by one or
   more signatures over all assertions within the shard.  Shards have an
   exclusive lexicographic range, and contain all assertions for names
   within a zone within that range.  This lexicographic completeness
   leads to the property that given a subject and an authenticated
   shard, it can be shown that either an assertion with a given name,
   type and object value exists within the shard or does not exist at
   all.

   A shard has the following information elements:

   o  Context: name of the context in which the assertions in the shard
      are valid; see Section 5.1.1 above.

   o  Zone: name of the zone in which the assertions are made.

   o  Range: an exclusive lexicographic range within which the contained
      assertions' names must be.

   o  Content: a lexicographically sorted set of assertions sharing the
      context and zone.

   o  Signatures: one or more signatures generated by the authority for
      the shard; see Section 5.1.2.

   For efficiency's sake, information elements within a shard common to
   all assertions (zone, context) within the shard must be omitted from
   the assertions themselves.  Signatures on contained assertions may be
   omitted.

   A P-Shard represents a space-efficient probabilistic data structure
   stored as a bit string to proof nonexistence.  The data structure is
   used to prove membership of an element in a set.  The set could
   either be the entire zone or an exclusive lexicographic range of that
   zone (like the range of a shard).  All assertions within the same
   zone and context, and whose names are within the range are elements
   of the set.  A P-Shard is protected by one or more signatures.  A
   membership query to the P-Shard responds either with 'an assertion
   with a given name and type might be part of the set' or 'an assertion
   with a given name and type is definitely not part of the set'.  The
   second response can be used to proof nonexistence of an assertion
   with a given name and type.  There is a tradeoff between the size of
   the bit string, membership query time, and the false positive error
   rate.  The zone authority can determine how to weight them.

   A P-Shard has the following information elements:




Trammell & Fehlmann       Expires April 4, 2019                [Page 20]

Internet-Draft                    RAINS                     October 2018


   o  Context: name of the context in which the assertions in the
      P-Shard are valid; see Section 5.1.1.

   o  Zone: name of the zone in which the assertions are made.

   o  Range: an exclusive lexicographic range within which the contained
      assertions' names must be.

   o  Type: the type of the probabilistic data structure contained in
      the P-Shard.

   o  Data structure: meta data about the data structure of the
      indicated type and a bit string representing the data structure
      itself.

   o  Signatures: one or more signatures generated by the authority for
      the shard; see Section 5.1.2.

   The Types supported for each P-Shard are:

   o  Bloom filter: A space-efficient probabilistic data structure using
      a configurable amount of hash functions from a specified hash
      family to generate a bit string encoding all contained assertions.

6.  Zone

   A zone is the entire set of shards, P-Shards, and assertions subject
   to a given authority within a given context.  The majority of zones
   will be tiny.  Thus, a zone can be used for both positive and
   negative answers as it contains all information about the zone while
   still being small.

   A zone has the following information elements:

   o  Context: name of the context in which the assertions in the zone
      are valid; see Section 5.1.1 above.

   o  Zone: name of the zone.

   o  Content: a set of assertions, P-Shards and/or shards sharing the
      context and zone.

   o  Signatures: one or more signatures generated by the authority for
      the zone; see Section 5.1.2.

   For efficiency's sake, information elements within a zone common to
   all assertions, shards, and P-Shards (zone, context) within the zone
   must be omitted from the assertions, shards, and P-Shards themselves.



Trammell & Fehlmann       Expires April 4, 2019                [Page 21]

Internet-Draft                    RAINS                     October 2018


   Signatures on contained assertions, shards, and P-Shards may be
   omitted.

6.1.  Zone-Reflexive Assertions

   A zone may make an assertion about itself by using the string "@" as
   a subject name.  This facility can be used for any assertion type,
   but is especially useful for self-signing root zones, and for a zone
   to make a subsequent key assertion about itself.  If an assertion of
   a given type about a zone is available both in the zone itself and in
   the superordinate zone, the assertion in the superordinate zone will
   take precedence.

6.2.  Query

   A query is a request for a set of assertions supporting a conclusion
   about a given subject-object mapping.  It consists of the following
   information elements:

   o  Context: the context(s) in which assertions answering the query
      will be accepted; see Section 6.2.1 below.

   o  Qualified-Subject: the name about which the query is made.  The
      subject name in a query must be fully-qualified.

   o  Types: a set of assertion types the querier is interested in.

   o  Key phases: the key phases of the delegation assertions the
      querier is interested in.

   o  Valid-Until: an optional client-generated timestamp for the query
      after which it expires and should not be answered.

   o  Query Token: a client-generated token for the query, which can be
      used in the answer to refer to the query.

   o  Options: a set of options by which a client may specify tradeoffs
      (e.g.  privacy for performance).

   A query expresses interest about all the given types of assertion in
   all the specified contexts; more complex expressions of which types
   in which contexts must be asked using multiple queries.  Preferences
   for tradeoffs (freshness, bandwidth efficiency, latency, privacy
   preservation) in servicing a query may be bound to the query using
   query options.






Trammell & Fehlmann       Expires April 4, 2019                [Page 22]

Internet-Draft                    RAINS                     October 2018


6.2.1.  Context in Queries

   Context is used in queries as it is in assertions (see
   Section 5.1.1).  Assertion contexts in an answer to a query have to
   match the context in the query in order to respond to a query.  The
   Context section of a query contains the context of desired
   assertions; a special "any" context (represented by the empty string)
   indicates that assertions in any context will be accepted.

   Query contexts can also be used to provide additional information to
   RAINS servers about the query.  For example, context can provide a
   method for explicit selection of a CDN server not based on either the
   client's or the resolver's address (see [RFC7871]).  Here, the CDN
   creates a context for each of its content zones, and an external
   service selects appropriate contexts for the client based not just on
   client source address but passive and active measurement of
   performance.  Queries for names at which content resides can then be
   made within these contexts, with the priority order of the contexts
   reflecting the goodness of the zone for the client.  Here, a context
   might be 'zrh.cx-cdn-zones.some-cdn.com.' for names of servers
   hosting content in a CDN's Zurich data center.  A client could
   represent its desire to find content nearby by making queries in the
   zrh.cx-, fra.cx- (Frankfurt), and ams.cx- (Amsterdam) contexts of the
   'cdn-zones.some-cdn.com.' authority.  In all cases, the assertions
   themselves will be signed by the authority for 'cdn-zones.some-
   cdn.com.', accurately representing that it is the CDN, not the owner
   of the related name in the global context, that is making the
   assertion.

   As with assertion contexts, developing conventions for query contexts
   for different situations will require implementation and deployment
   experience, and is a subject for future work.

6.2.2.  Answers to Queries

   An answer consists of a set of assertions, shards, and/or zones which
   respond to a query.  If the query contained a token, it is bound to
   that query via the token.

   The content of an answer depends on whether the answer is positive or
   negative.  A positive answer contains the information requested in
   the smallest atomic container that can be found, usually a single
   assertion.  A negative answer contains the information used to verify
   it; either a Shard, an entire Zone, or a Zone-Nameset assertion
   showing the name is illegal within the zone.

   A query is taken to have an inconclusive answer when no answer
   returns to the querier before the query's Valid-Until time.



Trammell & Fehlmann       Expires April 4, 2019                [Page 23]

Internet-Draft                    RAINS                     October 2018


6.3.  Assertion Update Query

   An assertion update query is a request for an updated version of a
   specified assertion.  It consists of the following information
   elements:

   o  Qualified-Subject: the fully-qualified name of the assertion.

   o  Hash function: the hash function used to hash the assertion.

   o  Hashed Assertion: The hash value obtained by hashing the
      assertion.

   o  Valid-Until: an optional client-generated timestamp for the query
      after which it expires and should not be answered.

   o  Query Token: a client-generated token for the query, which must be
      used in the answer to refer to the query.

6.3.1.  Answers to Assertion Update Queries

   An answer consists of an assertion, a shard, a zone, or a
   notification which responds to an assertion update query.  If the
   update query contained a token, it is bound to that query via the
   token.

   The content of an answer depends on whether there is a newer version
   of the assertion that is already valid.  If the hashed assertion is
   still the most recent one, a 200 notification message is returned.
   In case there is an assertion for the same name, type and object
   value with a higher validUntil value, the one with the highest value
   is returned.  Otherwise a shard, zone or 210 notification is
   returned.  A shard or zone is preferred over the notification answer.

   An update query is taken to have an inconclusive answer when no
   answer returns to the querier before the update query's Valid-Until
   time.

6.4.  Nonexistence Update Query

   A nonexistence update query is a request for an updated version of a
   previously non-existent name proven through a shard or zone.  It
   consists of the following information elements:

   o  Context: the context(s) in which sections answering the update
      query will be accepted; see Section 6.2.1 above.





Trammell & Fehlmann       Expires April 4, 2019                [Page 24]

Internet-Draft                    RAINS                     October 2018


   o  Qualified-Subject: the fully-qualified name within the range of
      the shard or the zone for which a nonexistence proof is requested.

   o  Type: the assertion type the querier is interested in.

   o  Hash function: the hash function used to hash the shard or the
      zone.

   o  Hashed Section: the hash value obtained by hashing the shard or
      the zone.

   o  Valid-Until: an optional client-generated timestamp for the query
      after which it expires and should not be answered.

   o  Query Token: a client-generated token for the query, which must be
      used in the answer to refer to the query.

6.4.1.  Answers to Nonexistence Update Queries

   An answer consists of an assertion, a shard, a zone, or a
   notification which responds to an update query.  If the update query
   contained a token, it is bound to that query via the token.

   The content of an answer depends on whether there is a new assertion
   for the queried context, subject-name and type or a newer version of
   the hashed shard or zone which is already valid.  If a new assertion
   exists, it is returned.  In case there is no matching assertion and
   there is a currently valid zone or a shard in the range of the fully-
   qualified name in a matching context with a higher validUntil value,
   the section with the highest validUntil value is returned.
   Otherwise, the shard or zone is still the most recent one and a 200
   notification message is returned.

   An update query is taken to have an inconclusive answer when no
   answer returns to the querier before the query's Valid-Until time.

6.5.  Address to Object Mapping

   In contrast to the current domain name system, information about
   addresses is stored in a completely separate tree, keyed by address
   and prefix.  An address assertion consists of the following elements:

   o  Context: name of the context in which the assertion is valid; see
      Section 6.5.1.

   o  Subject: address about which the assertion is made, consisting of
      an address family, address, and prefix length.  A subject may be a
      network address (where the prefix length is less than the address



Trammell & Fehlmann       Expires April 4, 2019                [Page 25]

Internet-Draft                    RAINS                     October 2018


      length for the given address family) or a host address (where the
      prefix length is equal to the address length for the given address
      family)

   o  Type: the type of information about the Subject contained in the
      assertion.  Each Assertion is about a single type of data.

   o  Object: the data of the indicated type associated with the Subject

   o  Signatures: one or more signatures generated by the authority for
      the Assertion.  Signatures contain a time interval during which
      they are considered valid, as in Section 5.1.2.

   The following object types are available:

   o  Delegation: the authority associated with the subject network
      address.  The Object contains a public key by which the authority
      can be identified.  Only available for network address subjects.

   o  Redirection: The name(s) of one or more RAINS servers providing
      authority service for the authority associated with the subject
      network address.  The Object contains a set of names.  Only
      available for network address subjects.

   o  Name: one or more names associated with the subject network
      address.  The Object contains a set of names.  Only available for
      host address subjects.

   o  Zone-Registrant: Information about the organization responsible
      for a network.  Only available for network address subjects.

   Queries for addresses are similar to those for names, and consist of
   the following information elements:

   o  Context: Context in which the query is made; this must match the
      assertion context as in Section 6.5.1.

   o  Subject: the address about which the query is made, consisting of
      an address family, address, and prefix length.

   o  Types: a set of assertion types the querier is interested in, as
      above.

   o  Valid-Until: an optional client-generated timestamp for the query
      after which it expires and should not be answered.

   o  Query Token: a client-generated token for the query, which can be
      used in the answer to refer to the query.



Trammell & Fehlmann       Expires April 4, 2019                [Page 26]

Internet-Draft                    RAINS                     October 2018


6.5.1.  Context in Address Assertions

   Just as in forward Assertions, Assertion contexts are used in address
   assertions to determine the scope of an address assertion, and the
   signature chain used to verify it.

   o  The global addressing context for each address family is
      identified by the special context name '.'.  For both IPv4 and
      IPv6 addresses, this is rooted at IANA, which delegates to the
      RIRs, which then delegates to LIRs and to address-holding
      registries.

   o  Local contexts associated with a given authority in a forward tree
      can also make assertions about addresses.  As with contexts in
      forward assertions, the authority-part and the context-part of a
      local context name are divided by a context marker ('cx-').  The
      authority-part directly identifies the authority whose key was
      used to sign the address assertion; address assertions within a
      local context are only valid if signed by the identified
      authority.  Authorities have complete control over how the
      contexts under their numberspaces are arranged, and over the
      addresses within those contexts.

   Each local context may have a root address space zone (0/0), but
   these root address spaces may only delegate addresses that are
   reserved for local use [RFC1918] [RFC4193].  Local context assertions
   for other addresses are invalid.

7.  CBOR Data Model

   The RAINS data model is a relatively straightforward mapping of the
   information model in Section 5 to the Concise Binary Object
   Representation (CBOR) [RFC7049], with an outer message type providing
   a mechanism for future capabilities-based versioning and recognition
   of a message as a RAINS message.

   Messages, assertions, shards, P-Shards, zones, queries, and
   notifications are each represented as a CBOR map of integer keys to
   values, which allows each of these types to be extended in the
   future, as well as the addition of non- standard, application-
   specific information to RAINS messages and data items.  A common
   registry of map keys is given in Table 1.  RAINS implementations MUST
   ignore map keys they do not understand.  Integer map keys in the
   range -22 to +23 are reserved for the use of future versions or
   extensions to the RAINS protocol.

   Message contents, signatures and object values are implemented as
   type- prefixed CBOR arrays with fixed meanings of each array element;



Trammell & Fehlmann       Expires April 4, 2019                [Page 27]

Internet-Draft                    RAINS                     October 2018


   the structure of these lower-level elements can therefore not be
   extended.  Message section types are given in Table 2, object types
   in Table 5, and signature algorithms in Table 11.

7.1.  Symbol Table

   The meaning of each of the integer keys in message, zone, shard,
   assertion, and notification maps is given in the symbol table below:

   +------+----------------+-------------------------------------------+
   | Code | Name           | Description                               |
   +------+----------------+-------------------------------------------+
   |    0 | signatures     | Signatures on a message or section        |
   |      |                |                                           |
   |    1 | capabilities   | Capabilities of server sending message    |
   |      |                |                                           |
   |    2 | token          | Token for referring to a data item        |
   |      |                |                                           |
   |    3 | subject-name   | Subject name in an assertion, shard,      |
   |      |                | P-Shard or zone                           |
   |      |                |                                           |
   |    4 | subject-zone   | Zone name in an assertion, shard, P-Shard |
   |      |                | or zone                                   |
   |      |                |                                           |
   |    5 | subject-addr   | Subject address in address assertion      |
   |      |                |                                           |
   |    6 | context        | Context of an assertion, shard, P-Shard,  |
   |      |                | zone or query                             |
   |      |                |                                           |
   |    7 | objects        | Objects of an assertion                   |
   |      |                |                                           |
   |    8 | query-name     | Fully qualified name for a query          |
   |      |                |                                           |
   |   10 | query-types    | Acceptable object types for a query       |
   |      |                |                                           |
   |   11 | range          | Lexical range of Assertions in shard or   |
   |      |                | P-Shard                                   |
   |      |                |                                           |
   |   12 | query-expires  | Absolute timestamp for query expiration   |
   |      |                |                                           |
   |   13 | query-opts     | Set of query options requested            |
   |      |                |                                           |
   |   14 | hash-type      | Hash function used in an update query     |
   |      |                |                                           |
   |   15 | hash-value     | Value of a hashed assertion, shard,       |
   |      |                | P-Shard or zone                           |
   |      |                |                                           |
   |   17 | key-phases     | All requested key phases of a query       |



Trammell & Fehlmann       Expires April 4, 2019                [Page 28]

Internet-Draft                    RAINS                     October 2018


   |      |                |                                           |
   |   18 | data-structure | Data structure of a P-Shard               |
   |      |                |                                           |
   |   21 | note-type      | Notification type                         |
   |      |                |                                           |
   |   22 | note-data      | Additional notification data              |
   |      |                |                                           |
   |   23 | content        | Content of a message, shard, P-Shard or   |
   |      |                | zone                                      |
   +------+----------------+-------------------------------------------+

                   Table 1: CBOR Map Keys used in RAINS

7.2.  Message

   All interactions in RAINS take place in an outer envelope called a
   Message, which is a CBOR map tagged with the RAINS Message tag (hex
   0xE99BA8, decimal 15309736).

   A Message map MAY contain a signatures (0) key, whose value is an
   array of Signatures over the entire message as defined in
   Section 7.17, to be verified against the infrastructure key for the
   RAINS Server originating the message.

   A Message map MAY contain a capabilities (1) key, whose value is
   described in Section 7.18.

   A Message map MUST contain a token (2) key, whose value is a 16-byte
   array.  See Section 7.16 for details.

   A Message map MUST contain a content (23) key, whose value is an
   array of Message Sections; a Message Section is either an Assertion,
   Shard, Zone, Query, or Notification.

7.3.  Message Section header

   Each Message Section in the Message's content value MUST be a two-
   element array.  The first element in the array is the message section
   type, encoded as an integer as in Table 2.  The second element in the
   array is a message section body, a CBOR map defined as in the
   subsections Section 7.4-Section 7.13










Trammell & Fehlmann       Expires April 4, 2019                [Page 29]

Internet-Draft                    RAINS                     October 2018


   +------+--------------+---------------------------------------------+
   | Code | Name         | Description                                 |
   +------+--------------+---------------------------------------------+
   |    1 | assertion    | Assertion (see Section 7.4)                 |
   |      |              |                                             |
   |   -1 | revassertion | Address Assertion (see Section 7.11)        |
   |      |              |                                             |
   |    2 | shard        | Shard (see Section 7.5)                     |
   |      |              |                                             |
   |    3 | zone         | Zone (see Section 7.7)                      |
   |      |              |                                             |
   |    4 | query        | Query (see Section 7.8)                     |
   |      |              |                                             |
   |   -4 | revquery     | Address Query (see Section 7.12)            |
   |      |              |                                             |
   |    5 | auquery      | Assertion update query (see Section 7.9)    |
   |      |              |                                             |
   |    6 | nuquery      | Nonexistence update query (see              |
   |      |              | Section 7.10)                               |
   |      |              |                                             |
   |    7 | P-Shard      | P-Shard (see Section 7.6)                   |
   |      |              |                                             |
   |   23 | notification | Notification (see Section 7.13)             |
   +------+--------------+---------------------------------------------+

                    Table 2: Message Section Type Codes

7.4.  Assertion body

   An Assertion body is a map.  The keys present in this map depend on
   whether the Assertion is contained in a Message, Shard or Zone.

   Assertions contained in a Message's content value are "bare
   Assertions".  Since they cannot inherit any values from their
   containers, they MUST contain the signatures (0), subject-name (3),
   subject-zone (4), context (6), and objects (7) keys.

   Assertions within a Shard or Zone are "contained Assertions", and can
   inherit values from their containers.  A contained Assertion MUST
   contain the subject- name (3) and objects (7) keys.  The subject-zone
   (4) and context (6) keys MUST NOT be present.  They are assumed to
   have the same value as the corresponding values in the containing
   Shard or Zone for signature generation and signature verification
   purposes; see Section 7.17.

   A contained Assertion SHOULD contain the signatures (0) key, since an
   unsigned contained Assertion cannot be used by a RAINS server to
   answer a query; it must be returned in a signed Shard or Zone.



Trammell & Fehlmann       Expires April 4, 2019                [Page 30]

Internet-Draft                    RAINS                     October 2018


   The value of the signatures (0) key, if present, is an array of one
   or more Signatures as defined in Section 7.17.  If not present, the
   containing Shard or Zone MUST be signed.  Signatures on a contained
   Assertion are generated as if the inherited subject-zone and context
   values are present in the Assertion, whether actually present or not.
   The signatures on the Assertion are to be verified against the
   appropriate key for the Zone containing the Assertion in the given
   context, as described in Section 5.1.2.

   The value of the subject-name (3) key is a UTF-8 encoded [RFC3629]
   string containing the name of the subject of the assertion.  The
   subject name MAY contain dot(s) '.'.  The subject name never contains
   the zone in which the subject name is registered; the fully-qualified
   name is obtained by joining the subject-name to the subject-zone with
   a '.' character.  The subject-name must be valid according to the
   nameset expression for the zone, if any.

   The value of the subject-zone (4) key, if present, is a UTF-8 encoded
   string containing the name of the zone in which the assertion is made
   and MUST end with '.' (the root zone).  If not present, the zone of
   the assertion is inherited from the containing Shard or Zone.

   The value of the context (6) key, if present, is a UTF-8 encoded
   string containing the name of the context in which the assertion is
   valid.  Both the authority-part and the context-part MUST end with a
   '.'.  If not present, the context of the assertion is inherited from
   the containing Shard or Zone.

   The value of the objects (7) key is an array of objects, as defined
   in Section 7.14.

7.4.1.  Sorting Assertions

   Assertions are sorted lexicographically by their cbor encoded byte
   string in ascending order.  That means, they are sorted by the
   following elements in the mentioned order: fully qualified name,
   context, type, object value(s), signature meta data.

7.5.  Shard body

   A Shard body is a map.  The keys present in the map depend on whether
   the Shard is contained in a Message or in a Zone.

   Shards contained in a Message's content value are "bare Shards".
   Since they cannot inherit any values from their contained Zone, they
   MUST contain the content (23), signatures (0), subject-zone (4),
   context (6), and range (11) keys.




Trammell & Fehlmann       Expires April 4, 2019                [Page 31]

Internet-Draft                    RAINS                     October 2018


   Shards within a Zone are "contained Shards", and can inherit values
   from their containing Zone.  A contained Shard MUST contain the
   range(11) and content (23) keys.  The subject-zone (4) and context
   (6) keys MUST NOT be present.  They are assumed to have the same
   value as the corresponding values in the containing Zone for
   signature generation and signature verification purposes; see
   Section 7.17.

   A contained Shard SHOULD contain the signatures (0) key, since an
   unsigned contained Shard cannot be used by a RAINS server to answer a
   query for nonexistence; it must be returned in a signed Zone.

   The value of the content (23) key is an array of Assertion bodies as
   defined in Section 7.4.  Assertions within a Shard MUST be sorted
   according to Section 7.4.1.

   The value of the signatures (0) key, if present, is an array of one
   or more Signatures as defined in Section 7.17.  If not present, the
   containing Zone MUST be signed.  Signatures on a contained Shard are
   generated as if the inherited subject-zone and context values are
   present in the Shard, whether actually present or not.  The
   signatures on the Shard are to be verified against the appropriate
   key for the Zone containing the Shard in the given context, as
   described in Section 5.1.2.

   The value of the subject-zone (4) key, if present, is a UTF-8 encoded
   string containing the name of the zone in which the Assertions within
   the Shard is made and MUST end with '.' (the root zone).  If not
   present, the zone of the assertion is inherited from the containing
   Zone.

   The value of the context (6) key, if present, is a UTF-8 encoded
   string containing the name of the context in which the Assertions
   within the Shard are valid.  Both the authority-part and the context-
   part MUST end with a '.'.  If not present, the context of the
   assertion is inherited from the containing Zone.

   The value of the range (11) key MUST be a two element array of
   strings or nulls (subject-name A, subject-name B).  A must
   lexicographically sort before B, but neither subject name need be
   present in the shard's contents.  If A is null, the shard begins at
   the beginning of the zone.  If B is null, the shard ends at the end
   of the zone.  The shard MUST NOT contain any assertions whose subject
   names sort before A or after B.

   Shards are lexicographically complete within the range described in
   the range value: a subject-name within the range that is not
   contained in the shard is asserted to not exist.



Trammell & Fehlmann       Expires April 4, 2019                [Page 32]

Internet-Draft                    RAINS                     October 2018


7.5.1.  Sorting Shards

   Shards are sorted lexicographically by their cbor encoded byte string
   in ascending order.  That means, they are sorted by the following
   elements in the mentioned order: zone name, context, range begin,
   range end, content, signature meta data.

7.6.  P-Shard body

   A P-Shard body is a map.  The keys present in the map depend on
   whether the P-Shard is contained in a Message or in a Zone.

   P-Shards contained in a Message's content value are "bare P-Shards".
   Since they cannot inherit any values from their contained Zone, they
   MUST contain the signatures (0), subject-zone (4), context (6), range
   (11), and data-structure (18) keys.

   P-Shards within a Zone are "contained P-Shards", and can inherit
   values from their containing Zone.  A contained P-Shards MUST contain
   the the range(11) and data-structure (18) keys.  The subject-zone (4)
   and context (6) keys MUST NOT be present.  They are assumed to have
   the same value as the corresponding values in the containing Zone for
   signature generation and signature verification purposes; see
   Section 7.17.

   A contained P-Shard SHOULD contain the signatures (0) key, since an
   unsigned contained P-Shard cannot be used by a RAINS server to answer
   a query for nonexistence; it must be returned in a signed Zone.

   The value of the signatures (0) key, if present, is an array of one
   or more Signatures as defined in Section 7.17.  If not present, the
   containing Zone MUST be signed.  Signatures on a contained P-Shard
   are generated as if the inherited subject-zone and context values are
   present in the P-Shard, whether actually present or not.  The
   signatures on the P-Shard are to be verified against the appropriate
   key for the Zone containing the P-Shard in the given context, as
   described in Section 5.1.2.

   The value of the subject-zone (4) key, if present, is a UTF-8 encoded
   string containing the name of the zone in which the Assertions in the
   P-Shard is made and MUST end with '.' (the root zone).  If not
   present, the zone of the assertion is inherited from the containing
   Zone.

   The value of the context (6) key, if present, is a UTF-8 encoded
   string containing the name of the context in which the Assertions in
   the P-Shard are valid.  Both the authority-part and the context-part




Trammell & Fehlmann       Expires April 4, 2019                [Page 33]

Internet-Draft                    RAINS                     October 2018


   MUST end with a '.'.  If not present, the context of the assertion is
   inherited from the containing Zone.

   The value of the range (11) key MUST be a two element array of
   strings or nulls (subject-name A, subject-name B).  A must
   lexicographically sort before B, but neither subject name need be
   present in the P-Shard's contents.  If A is null, the P-Shard begins
   at the beginning of the zone.  If B is null, the P-Shard ends at the
   end of the zone.  The P-Shard MUST NOT contain any assertions whose
   subject names sort before A or after B.

   The value of the data-structure (18) key is an array of elements, as
   defined in Section 7.15.

   P-Shards are lexicographically complete within the range described in
   the range value: a subject-name and type within the range of a
   P-Shard giving a negative answer is asserted to not exist.

7.6.1.  Sorting P-Shard

   P-Shards are sorted lexicographically by their cbor encoded byte
   string in ascending order.  That means, they are sorted by the
   following elements in the mentioned order: zone name, context, range
   begin, range end, hash family, number of hash functions, filter,
   signature meta data.

7.7.  Zone body

   A Zone body is a map.  Zones MUST contain the content (23),
   signatures (0), subject-zone (4), and context (6) keys.

   Signatures on the Zone are to be verified against the appropriate key
   for the Zone in the given context, as described in Section 5.1.2.

   The value of the content (23) key is an array of Shard bodies as
   defined in Section 7.5, P-Shard bodies as defined in Section 7.6 and/
   or Assertion bodies as defined in Section 7.4.  Assertions, P-Shards
   and Shards in the content array MUST be sorted.  Assertions are
   sorted before P-Shards, which in turn are sorted before Shards.
   Groups of the same section type are sorted according to
   Section 7.4.1, Section 7.6.1, and Section 7.5.1.

   The value of the subject-zone (4) key is a UTF-8 encoded string
   containing the name of the Zone which MUST end with '.' (the root
   zone).






Trammell & Fehlmann       Expires April 4, 2019                [Page 34]

Internet-Draft                    RAINS                     October 2018


   The value of the context (6) key is a UTF-8 encoded string containing
   the name of the context for which the Zone is valid.  Both the
   authority-part and the context-part MUST end with a '.'.

7.8.  Query body

   A Query body is a map.  Queries MUST contain the query-name (8),
   context (6), query-types (10), and query-expires (12) keys.  Queries
   MAY contain the query-opts (13), and the key-phases (17) keys.

   The value of the query-name (8) key is a UTF-8 encoded string
   containing the name for which the query is issued and MUST end with a
   '.' (the root zone).

   The value of the context (6) key is a UTF-8 encoded string containing
   the name of the context to which a query pertains.  A zero-length
   string indicates that assertions will be accepted in any context.

   The value of the query-types (10) key is an array of integers
   encoding the type(s) of objects (as in Section 7.14) acceptable in
   answers to the query.  All values in the query-type array are treated
   at equal priority: [2,3] means the querier is equally interested in
   both IPv4 and IPv6 addresses for the query-name.  An empty query-
   types array indicates that objects of any type are acceptable in
   answers to the query.

   The value of the key-phases (17) key is an array of integers
   representing all key phases (see Section 7.17) expected in delegation
   assertion answers to the query.  The value of the key-phases (17) key
   MUST NOT be empty when the query asks for delegation assertion(s).
   Otherwise, it MUST be empty.

   The value of the query-expires (12) key, is a CBOR integer counting
   seconds since the UNIX epoch UTC, identified with tag value 1 and
   encoded as in section 2.4.1 of [RFC7049].  After the query-expires
   time, the query will have been considered not answered by the
   original issuer.

   The value of the query-opts (13) key, if present, is an array of
   integers in priority order of the querier's preferences in tradeoffs
   in answering the query, as in Table 3.










Trammell & Fehlmann       Expires April 4, 2019                [Page 35]

Internet-Draft                    RAINS                     October 2018


   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   |    1 | Minimize end-to-end latency                                |
   |      |                                                            |
   |    2 | Minimize last-hop answer size (bandwidth)                  |
   |      |                                                            |
   |    3 | Minimize information leakage beyond first hop              |
   |      |                                                            |
   |    4 | No information leakage beyond first hop: cached answers    |
   |      | only                                                       |
   |      |                                                            |
   |    5 | Expired assertions are acceptable                          |
   |      |                                                            |
   |    6 | Enable query token tracing                                 |
   |      |                                                            |
   |    7 | Disable verification delegation (client protocol only)     |
   |      |                                                            |
   |    8 | Suppress proactive caching of future assertions            |
   |      |                                                            |
   |    9 | Maximize freshness of result                               |
   |      |                                                            |
   |   10 | P-Shard not accepted                                       |
   +------+------------------------------------------------------------+

                        Table 3: Query Option Codes

   Options 1-5 and 9 specify performance/privacy tradeoffs.  Each server
   is free to determine how to minimize each performance metric
   requested; however, servers MUST NOT generate queries to other
   servers if "no information leakage" is specified, and servers MUST
   NOT return expired assertions unless "expired assertions acceptable"
   is specified.

   Option 6 specifies that a given token (see Section 7.16) should be
   used on all queries resulting from a given query, allowing
   traceability through an entire RAINS infrastructure.  It is meant for
   debugging purposes.

   By default, a client service will perform verification of negative
   queries and return a 404 No Assertion Exists for queries with a
   consistent proof of non- existence, within a message signed by the
   query service's infrakey.  Option 7 disables this behavior, and
   causes the query service to return the shard proving nonexistence for
   verification by the client.  It is intended to be used with untrusted
   query services.





Trammell & Fehlmann       Expires April 4, 2019                [Page 36]

Internet-Draft                    RAINS                     October 2018


   Option 8 specifies that a querier's interest in a query is strictly
   ephemeral, and that future assertions related to this query SHOULD
   NOT be proactively pushed to the querier.

   Options 9-12 specify a client's preference in the server's mode of
   operation.  A server is free to decide if it wants to follow the
   client's preference according to its configuration and policy.  E.g.
   if a server determines it is used in a DDoS attack against a naming
   server, it stops forwarding queries to this server and only serve
   cached entries.  Option 9 prevents the server to make a negative
   cache lookup and instead directly does a recursive lookup.  Option 10
   directly returns the section in a negative cache hit without checking
   if it is still up to date.  Option 11 sends a nonexistence update
   query to the naming server in case there is a negative cache hit.
   Option 12 requests a notification response before the server forwards
   the query if there is a negative cache hit.  This is especially
   useful with option 11 to get feedback early, e.g. to correct a typo.

   Option 10 states if a P-Shard is accepted as a nonexistence proof.
   As P-Shards have false positives, a client has the possibility to
   request a shard or zone to be certain with this option.  Depending on
   the servers' configurations, a false positive check can be done at
   the naming server, an intermediate server or at the client.

7.9.  Assertion Update Query body

   An Assertion Update Query body is a map.  Assertion Update Queries
   MUST contain the query-name (8), hash-type (14), hash-value (15), and
   query-expires (12) keys.  Assertion Update Queries MAY contain the
   query-opts (13) keys.

   The value of the query-name (8) key is a UTF-8 encoded string
   containing the fully-qualified name for which the update query is
   issued and MUST end with a '.' (the root zone).

   The value of the hash-type (14) key is an integer specifying a hash
   function identifier used to generate the hash-value of the assertion,
   as in Table 8.

   The value of the hash-value (15) key is the hash of the assertion for
   which an update is requested.  The hash is generated over a byte
   stream representing the assertion in a canonical signing format
   Section 7.17 (The signature itself is not hashed).  The format is
   defined by the hash-type.

   The value of the query-expires (12) key, is a CBOR integer counting
   seconds since the UNIX epoch UTC, identified with tag value 1 and
   encoded as in section 2.4.1 of [RFC7049].  After the query-expires



Trammell & Fehlmann       Expires April 4, 2019                [Page 37]

Internet-Draft                    RAINS                     October 2018


   time, the update query will have been considered not answered by the
   original issuer.

   The value of the query-opts (13) key, if present, is an array of
   integers in priority order of the querier's preferences in tradeoffs
   in answering the assertion update query, as in Table 3.  Only query
   option codes 1, 2, 3, 6, 7, 8 are allowed.

7.10.  Nonexistence Update Query body

   A Nonexistence Update Query body is a map.  Nonexistence Update
   Queries MUST contain the query-name (8), context (6), query-types
   (10), hash-type (14), hash-value (15), and query-expires (12) keys.
   Nonexistence Update Queries MAY contain the query-opts (13) keys.

   The value of the query-name (8) key is a UTF-8 encoded string
   containing the fully-qualified name for which the update query is
   issued and MUST end with a '.' (the root zone).

   The value of the context (6) key is a UTF-8 encoded string containing
   the name of the context to which an update query pertains.  A zero-
   length string indicates that assertions will be accepted in any
   context.

   The value of the query-types (10) key is an array of integers
   encoding the type(s) of objects (as in Section 7.14) acceptable in
   answers to the update query.  All values in the query-type array are
   treated at equal priority: [2,3] means the querier is equally
   interested in both IPv4 and IPv6 addresses for the query-name.  An
   empty query-types array indicates that objects of any type are
   acceptable in answers to the query.

   The value of the hash-type (14) key is an integer specifying a hash
   function identifier used to generate the hash-value of the assertion,
   as in Table 8.

   The value of the hash-value (15) key is the hash of the assertion for
   which an update is requested.  The hash is generated over a byte
   stream representing the assertion in a canonical signing format
   Section 7.17 (The signature itself is not hashed).  The format is
   defined by the hash-type.

   The value of the query-expires (12) key, is a CBOR integer counting
   seconds since the UNIX epoch UTC, identified with tag value 1 and
   encoded as in section 2.4.1 of [RFC7049].  After the query-expires
   time, the update query will have been considered not answered by the
   original issuer.




Trammell & Fehlmann       Expires April 4, 2019                [Page 38]

Internet-Draft                    RAINS                     October 2018


   The value of the query-opts (13) key, if present, is an array of
   integers in priority order of the querier's preferences in tradeoffs
   in answering the nonexistence update query, as in Table 3.  Only
   query option codes 1, 2, 3, 6, 7, 8 are allowed.

7.11.  Address Assertion body

   Assertions about addresses are similar to assertions about names, but
   keyed by address and restricted in terms of the objects they can
   contain.  An Address Assertion body is a map which MUST contain the
   signatures (0), subject-addr (5), context (6), and objects (7) keys.

   The value of the signatures (0) key is an array of one or more
   Signatures as defined in Section 7.17.

   The value of the subject-addr (5) key is a three element CBOR array.
   The first element of the array is the address family encoded as an
   object type, 2 for IPv6 addresses and 3 for IPv4 addresses.  The
   second element is the prefix length encoded as an integer, 0-128 for
   IPv6 and 0-32 for IPv4.  The third element is the address, encoded as
   in Section 7.14.  Subject addresses with the maximum prefix length
   for the address family are subject host addresses, and are nameable;
   subject addresses with less than the maximum prefix length are
   subject network addresses, and are delegatable.

   The value of the context (6) key is a UTF-8 string containing the
   name of the context in which the Address Assertion is valid.  See
   Section 6.5.1.

   The value of the objects (7) key is an array of objects, as defined
   in Section 7.14.  Only object types redirection, delegation, and
   registrant are available for subject network addresses, and only
   object type name is available for subject host addresses.

7.12.  Address Query body

   Queries for assertions about addresses are similar to queries for
   assertions about names, but have semantic restrictions similar to
   those for Address Assertions.

   An Address Query body is a map.  Queries MUST contain the subject-
   addr (5), context (6), query-types (10), and query-expires (12) keys.
   Address Queries MAY contain query-opts (13) key.

   The value of the subject-addr (5) key is a three-element CBOR array.
   The first element of the array is the address family encoded as an
   object type, 2 for IPv6 addresses and 3 for IPv4 addresses.  The
   second element is the prefix length encoded as an integer, 0-128 for



Trammell & Fehlmann       Expires April 4, 2019                [Page 39]

Internet-Draft                    RAINS                     October 2018


   IPv6 and 0-32 for IPv4.  The third element is the address, encoded as
   in Section 7.14.

   The value of the context (6) key is a UTF-8 encoded string containing
   the name of the context for which the Query is valid.  Unlike queries
   for names, Address Queries can only pertain to a single context.  See
   Section 6.5.1 for more.

   The value of the query-types (10) key is an array of integers
   encoding the type(s) of objects (as in Section 7.14) acceptable in
   answers to the query.  All values in the query-type array are treated
   at equal priority: [4,5] means the querier is equally interested in
   both redirection and delegation for the subject-addr.  An empty
   query-types array indicates that objects of any type are acceptable
   in answers to the query.

   The value of the query-expires (12) key is a CBOR integer counting
   seconds since the UNIX epoch UTC, identified with tag value 1 and
   encoded as in section 2.4.1 of [RFC7049].  After the query-expires
   time, the query will have been considered not answered by the
   original issuer.

   The value of the query-opts (13) key, if present, is an array of
   integers in priority order of the querier's preferences in tradeoffs
   in answering the query, as in Table 3.  See Section 7.8 for more.

   An Address Assertion with a more-specific prefix is preferred over a
   less-specific in response to a Address Query.

7.13.  Notification body

   Notification Message Sections contain information about the operation
   of the RAINS protocol itself.  A Notification Message Section body is
   a map which MUST contain the token (2) and note-type (21) keys and
   MAY contain the note-data (22) key.  The value of the note-type key
   is encoded as an integer as in the Table 4.















Trammell & Fehlmann       Expires April 4, 2019                [Page 40]

Internet-Draft                    RAINS                     October 2018


   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   |  100 | Connection heartbeat                                       |
   |      |                                                            |
   |  200 | The hashed section in an update query is still fine        |
   |      |                                                            |
   |  210 | The hashed assertion has been revoked and is no longer     |
   |      | valid                                                      |
   |      |                                                            |
   |  211 | More specific information may follow                       |
   |      |                                                            |
   |  399 | Capability hash not understood                             |
   |      |                                                            |
   |  400 | Bad message received                                       |
   |      |                                                            |
   |  403 | Inconsistent message received                              |
   |      |                                                            |
   |  404 | No assertion exists (client protocol only)                 |
   |      |                                                            |
   |  413 | Message too large                                          |
   |      |                                                            |
   |  500 | Unspecified server error                                   |
   |      |                                                            |
   |  501 | Server not capable                                         |
   |      |                                                            |
   |  504 | No assertion available                                     |
   +------+------------------------------------------------------------+

                     Table 4: Notification Type Codes

   Note that the status codes are chosen to be mnemonically similar to
   status codes for HTTP [RFC7231].  Details of the meaning of each
   status code are given in Section 9.

   The value of the token (2) key is a 16-byte array, which MUST contain
   the token of the message or query to which the notification is a
   response.  See Section 7.16.

   The value of the note-data (22) key, if present, is a UTF-8 encoded
   string with additional information about the notification, intended
   to be displayed to an administrator to help debug the issue
   identified by the negotiation.








Trammell & Fehlmann       Expires April 4, 2019                [Page 41]

Internet-Draft                    RAINS                     October 2018


7.14.  Object

   Objects are encoded as arrays in CBOR, where the first element is the
   type of the object, encoded as an integer in the following table:

       +------+--------------+-------------------------------------+
       | Code | Name         | Description                         |
       +------+--------------+-------------------------------------+
       |    1 | name         | name associated with subject        |
       |      |              |                                     |
       |    2 | ip6-addr     | IPv6 address of subject             |
       |      |              |                                     |
       |    3 | ip4-addr     | IPv4 address of subject             |
       |      |              |                                     |
       |    4 | redirection  | name of zone authority server       |
       |      |              |                                     |
       |    5 | delegation   | public key for zone delgation       |
       |      |              |                                     |
       |    6 | nameset      | name set expression for zone        |
       |      |              |                                     |
       |    7 | cert-info    | certificate information for name    |
       |      |              |                                     |
       |    8 | service-info | service information for srvname     |
       |      |              |                                     |
       |    9 | registrar    | registrar information               |
       |      |              |                                     |
       |   10 | registrant   | registrant information              |
       |      |              |                                     |
       |   11 | infrakey     | public key for RAINS infrastructure |
       |      |              |                                     |
       |   12 | extrakey     | external public key for subject     |
       |      |              |                                     |
       |   13 | nextkey      | next public key for subject         |
       +------+--------------+-------------------------------------+

                        Table 5: Object type codes

   A name (1) object contains a name associated with a name as an alias.
   It is represented as a three-element array.  The second element is a
   fully-qualified name as a UTF-8 encoded string.  The third type is an
   array of object type codes for which the alias is valid, with the
   same semantics as the query-types (9) key in queries (see
   Section 7.8).

   An ip6-addr (2) object contains an IPv6 address associated with a
   name.  It is represented as a two element array.  The second element
   is a byte array of length 16 containing an IPv6 address in network
   byte order.



Trammell & Fehlmann       Expires April 4, 2019                [Page 42]

Internet-Draft                    RAINS                     October 2018


   An ip4-addr (3) object contains an IPv4 address associated with a
   name.  It is represented as a two element array.  The second element
   is a byte array of length 4 containing an IPv4 address in network
   byte order.

   A redirection (4) object contains the fully-qualified name of a RAINS
   authority server for a named zone.  It is represented as a two-
   element array.  The second element is a fully-qualified name of an
   RAINS authority server as a UTF-8 encoded string.

   A delegation (5) object contains a public key used to generate
   signatures on assertions in a named zone, and by which a delegation
   of a name within a zone to a subordinate zone may be verified.  It is
   represented as an N-element array.  The second element is a signature
   algorithm identifier as in Section 7.17.  The third element is a key
   phase as in Section 7.17.  Additional elements are as defined in
   Section 7.17 for the given algorithm identifier and RAINS delegation
   chain keyspace.

   A nameset (6) object contains an expression defining which names are
   allowed and which names are disallowed in a given zone.  It is
   represented as a two- element array.  The second element is a nameset
   expression to be applied to each name element within the zone without
   an intervening delegation, as defined in Section 7.14.2

   A cert-info (7) object contains an expression binding a certificate
   or certificate authority to a name, such that connections to the name
   must either use the bound certificate or a certificate signed by a
   bound authority.  It is represented as an five-element array, as
   defined in Section 7.14.1.

   A service-info (8) object gives information about a named service.
   Services are named as in [RFC2782].  It is represented as a four-
   element array.  The second element is a fully-qualified name of a
   host providing the named service as a UTF-8 string.  The third
   element is a transport port number as a positive integer in the range
   0-65535.  The fourth element is a priority as a positive integer,
   with lower numbers having higher priority.

   A registrar (9) object gives the name and other identifying
   information of the registrar (the organization which caused the name
   to be added to the namespace) for organization-level names.  It is
   represented as a two element array.  The second element is a UTF-8
   string of maximum length 256 bytes containing identifying information
   chosen by the registrar according to the registry's policy.

   A registrant (10) object gives information about the registrant of an
   organization-level name.  It is represented as a two element array.



Trammell & Fehlmann       Expires April 4, 2019                [Page 43]

Internet-Draft                    RAINS                     October 2018


   The second element is a UTF-8 string with a maximum length of 4096
   bytes containing this information, with a format chosen by the
   registrar according to the registry's policy.

   An infrakey (11) object contains a public key used to generate
   signatures on messages by a named RAINS server, by which a RAINS
   message signature may be verified by a receiver.  It is identical in
   structure to a delegation object, as defined in Section 7.17.
   Infrakey signatures are especially useful for clients which delegate
   verification to their query servers to authenticate the messages sent
   by the query server.

   An extrakey (12) object contains a public key used to generate
   signatures on assertions in a named zone outside of the normal
   delegation chain.  It is represented as an 4-element array, where the
   second element is a signature algorithm identifier, and the third
   element is keyspace identifier, as in Section 7.17.  The fourth
   element is the public key, as defined in Section 7.17 for the given
   algorithm identifier.  An extrakey may be matched with a public key
   obtained through other means for additional authentication of an
   assertion.  Extrakeys are different from delegation keys in that they
   may not be used in the delegation chain: an extrakey signature is
   valid only on assertions of object types other than delegation.

   A nextkey (13) object contains the a public key that a zone owner
   would like its superordinate to delegate to in the future.  It is
   represented as an 5-element array The second element is a signature
   algorithm identifier as in Section 7.17.  The third element is the
   public key, as defined in Section 7.17 for the given algorithm
   identifier.  The fourth element is the requested-valid-since time,
   and the fifth element is the requested-valid-until time, formatted as
   for signatures as in Section 7.17.  See Section 12.3 for more.

7.14.1.  Certificate information format

   A cert-info object contains information about the certificate(s) that
   can be used to authenticate a transport-layer association with a
   named entity.  It is encoded as a file-element array.  The first
   element is the RAINS object type (7).  The second element is the
   protocol family specifier, describing the cryptographic protocol used
   to connect, as defined in Table 6.  The protocol family defines the
   format of certificate data to be hashed.  The third element is the
   certificate usage specifier as in Table 7, describing the constraint
   imposed by the assertion.  These are defined to be compatible with
   Certificate Usages in the TLSA RRTYPE for DANE [RFC6698].  The fourth
   element is the hash algorithm identifier, defining the hash algorithm
   used to generate the certificate data, as in Table 8.  The fifth item




Trammell & Fehlmann       Expires April 4, 2019                [Page 44]

Internet-Draft                    RAINS                     October 2018


   is the data itself, whose format is defined by the protocol family
   and hash algorithm.

   +------+--------+---------------------------------+-----------------+
   | Code | Name   | Protocol family                 | Certificate     |
   |      |        |                                 | format          |
   +------+--------+---------------------------------+-----------------+
   |    0 | unspec | Unspecified                     | Unspecified     |
   |      |        |                                 |                 |
   |    1 | tls    | Transport Layer Security (TLS)  | [RFC5280]       |
   |      |        | [RFC8446]                       |                 |
   +------+--------+---------------------------------+-----------------+

            Table 6: Certificate information protocol families

   Protocol family 0 leaves the protocol family unspecified; client
   validation and usage of cert-info assertions, and the protocol used
   to connect, are up to the client, and no information is stored in
   RAINS.  Protocol family 1 specifies Transport Layer Security version
   1.3 [RFC8446] or a subsequent version, secured with PKIX [RFC5280]
   certificates.

                +------+------+--------------------------+
                | Code | Name | Certificate usage        |
                +------+------+--------------------------+
                |    2 | ta   | Trust Anchor Certificate |
                |      |      |                          |
                |    3 | ee   | End-Entity Certificate   |
                +------+------+--------------------------+

               Table 7: Certificate information usage values

   A trust anchor certificate constraint specifies a certificate that
   MUST appear as the trust anchor for the certificate presented by the
   subject of the assertion on a connection attempt.  An end-entity
   certificate constraint specifies a certificate that MUST be presented
   by the subject of the assertion on a connection attempt.














Trammell & Fehlmann       Expires April 4, 2019                [Page 45]

Internet-Draft                    RAINS                     October 2018


     +------+------------+------------------------------------------+
     | Code | Name       | Notes                                    |
     +------+------------+------------------------------------------+
     |    0 | full       | Data contains full certificate           |
     |      |            |                                          |
     |    1 | sha-256    | Data contains SHA-256 hash (32 bytes)    |
     |      |            |                                          |
     |    2 | sha-512    | Data contains SHA-512 hash (64 bytes)    |
     |      |            |                                          |
     |    3 | sha-384    | Data contains SHA-384 hash (48 bytes)    |
     |      |            |                                          |
     |    4 | fnv-64     | Data contains FNV-64 hash (64 bytes)     |
     |      |            |                                          |
     |    5 | murmur3-64 | Data contains murmur3-64 hash (64 bytes) |
     +------+------------+------------------------------------------+

                         Table 8: Hash algorithms

   Code 0 is used to store full certificates in RAINS assertions, while
   other codes are used to store hashes for verification.

   For example, in a cert-info object with values [ 7, 1, 3, 3, (data)
   ], the data would be a 48 SHA-384 hash of the ASN.1 DER-encoded
   X.509v3 certificate (see Section 4.1 of [RFC5280]) to be presented by
   the endpoint on a connection attempt with TLS version 1.2 or later.

7.14.2.  Name expression format

   The nameset expression is represented as a UTF-8 string encoding a
   modified POSIX Extended Regular Expression format (see POSIX.2) to be
   applied to each element of a name within the zone.  A name containing
   an element that does not match the valid nameset expression for a
   zone is not valid within the zone, and the nameset assertion can be
   used to prove nonexistence.

   The POSIX character classes :alnum:, :alpha:, :ascii:, :digit:,
   :lower:, and :upper: are available in these regular expressions,
   where:

   o  :lower: matches all codepoints within the Unicode general category
      "Letter, lowercase"

   o  :upper: matches all codepoints within the Unicode general category
      "Letter, uppercase"

   o  :alpha: matches all codepoints within the Unicode general category
      "Letter".




Trammell & Fehlmann       Expires April 4, 2019                [Page 46]

Internet-Draft                    RAINS                     October 2018


   o  :digit: matches all codepoints within the Unicode general category
      "Number, decimal digit"

   o  :alnum: is the union of :alpha: and :digit:

   o  :ascii: matches all codepoints in the range 0x20-0x7f

   In addition, each Unicode block is available as a character class,
   with the syntax :ublkXXXX: where XXXX is a 4 or 5 digit, zero-
   prefixed hex encoding of the first codepoint in the block.  For
   example, the Cyrillic block is available as :ublk0400:.

   Unicode escapes are supported in these regular expressions; the
   sequence \uXXXX where XXXX is a 4 or 5 digit, possibly zero-prefixed
   hex encoding of the codepoint, is substituted with that codepoint.

   Set operations (intersection and subtraction) are available on
   character classes.  Two character class or range expressions in a
   bracket expression joined by the sequence && are equivalent to the
   intersection of the two character classes or ranges.  Two character
   class or range expressions in a bracket expression joined by the
   sequence - are equivalent to the subtraction of the second character
   class or range from the first.

   For example, the nameset expression:

   [[:ublk0400:]&&[:lower:][:digit:]]+

   matches any name made up of one or more lowercase Cyrillic letters
   and digits.  The same expression can be implemented with a range
   instead of a character class:

   [\u0400-\u04ff&&[:lower:][:digit:]]+

7.15.  Data structures

   A data structure is encoded as an arrays in CBOR, where the first
   element is the type of the data structure, encoded as an integer in
   the following table:

          +------+--------------+-------------------------------+
          | Code | Name         | Description                   |
          +------+--------------+-------------------------------+
          |    1 | bloom-filter | A bloom filter data structure |
          +------+--------------+-------------------------------+

                    Table 9: Data structure type codes




Trammell & Fehlmann       Expires April 4, 2019                [Page 47]

Internet-Draft                    RAINS                     October 2018


   A bloom-filter (1) data structure is represented as a five-element
   array.  The second element is an array of integers specifying a
   family of hash function(s) identifier, as in Table 8.  The third
   element is an integer determining the number of hash functions used
   in the bloom filter from the specified family of hash functions.  The
   fourth element is an integer specifying the mode of operation
   identifier, as in Table 10 The fifth element is a bit string
   representing the bloom filter itself as defined in Section 7.15.1

   +------+-----------------------+------------------------------------+
   | Code | Name                  | Description                        |
   +------+-----------------------+------------------------------------+
   |    0 | standard              | Provided hash functions are used   |
   |      |                       |                                    |
   |    1 | Kirsch-Mitzenmacher-1 | Kirsch-Mitzenmacher optimization   |
   |      |                       | with 1 hash function               |
   |      |                       |                                    |
   |    2 | Kirsch-Mitzenmacher-2 | Kirsch-Mitzenmacher optimization   |
   |      |                       | with 2 hash function               |
   +------+-----------------------+------------------------------------+

                 Table 10: Bloom filter mode of operations

   For code 0, the number of provided hash function identifiers must be
   equal to the number of hash functions used in the bloom filter.  The
   results of the hash functions are taken modulo the size of the bloom
   filter to determine which position to set or check in the filter.

   For code 1 and 2, instead of using k different hash functions to
   calculate the bit string of the bloom filter, it is sufficient to use
   one or two and then apply the Kirsch-Mitzenmacher-Optimization
   [BETTER-BLOOM-FILTER].  If only one hash function is used, then its
   calculated hash value is split in half.  The first part corresponds
   to the first hash function in the optimization and the second part to
   the second one.  The following formula is used to obtain the position
   which will be set to or checked for a 1 according to the ith hash
   function:

   pos = (hash1 + hash2*i) modulo bit-string-size

7.15.1.  Bloom Filter Bit String

   The bit string of an empty bloom filter is all zeros.  To add an
   assertion, first, the assertion's fully-qualified name, context and
   code of its type are concatenated separated by a space.  This value
   is then hashed a certain amount of times with the provided hash
   functions depending on the mode of operation and the corresponding
   position(s) in the filter are set to one, see Table 10.



Trammell & Fehlmann       Expires April 4, 2019                [Page 48]

Internet-Draft                    RAINS                     October 2018


   To check wether an assertion is not part of the bloom filter, the
   same process is repeated for the assertion in question.  If any of
   the obtained filter position(s) is zero, then this assertion is
   certainly not contained.

7.16.  Tokens in queries and messages

   Messages and notifications contain an opaque token (2) key, whose
   content is a 16-byte array, and is used to link Messages to the
   Queries they respond to, and Notifications to the Messages they
   respond to.  Tokens MUST be treated as opaque values by RAINS
   servers.

   A Message sent in response to a Query (normal and update) MUST
   contain the token of the Message containing the Query.  Otherwise,
   the Message MUST contain a token selected by the server originating
   it, so that future Notifications can be linked to the Message causing
   it.  Likewise, a Notification sent in response to a Message MUST
   contain the token from the Message causing it (where the new Message
   contains a fresh token selected by the server).  This allows sending
   multiple Notifications within one Message and the receiving server to
   respond to a Message containing Notifications (e.g. when it is
   malformed).

   Since tokens are used to link queries to replies, and to link
   notifications to messages, regardless of the sender or recipient of a
   message, they MUST be chosen by servers to be hard to guess; e.g.
   generated by a cryptographic random number generator.

   When a server creates a new query to forward to another server in
   response to a query it received, it MUST NOT use the same token on
   the delegated query as on the received query, unless option 6 Enable
   Tracing is present in the received, in which case it MUST use the
   same token.

7.17.  Signatures, delegation keys, and RAINS infrastructure keys

   RAINS supports multiple signature algorithms and hash functions for
   signing assertions for cryptographic algorithm agility [RFC7696].  A
   RAINS signature algorithm identifier specifies the signature
   algorithm; a hash function for generating the HMAC and the format of
   the encodings of the signature values in Assertions, Shards, Zones,
   and Messages, as well as of public key values in delegation objects.

   RAINS signatures have five common elements: the algorithm identifier,
   a keyspace identifier, a key phase, a valid-since timestamp, and a
   valid-until timestamp.  Signatures are represented as an array of




Trammell & Fehlmann       Expires April 4, 2019                [Page 49]

Internet-Draft                    RAINS                     October 2018


   these five values followed by additional elements containing the
   signature data itself, according to the algorithm identifier.

   The following algorithms are supported:

         +--------+------------+-----------+--------------------+
         | Alg ID | Signatures | Hash/HMAC | Format             |
         +--------+------------+-----------+--------------------+
         |      1 | ed25519    | sha-512   | See Section 7.17.1 |
         |        |            |           |                    |
         |      2 | ed448      | shake256  | See Section 7.17.1 |
         |        |            |           |                    |
         |      3 | ecdsa-256  | sha-256   | See Section 7.17.2 |
         |        |            |           |                    |
         |      4 | ecdsa-384  | sha-384   | See Section 7.17.2 |
         +--------+------------+-----------+--------------------+

                  Table 11: Defined signature algorithms

   As noted in Section 7.17.1, support for Algorithm 1, ed25519, is
   REQUIRED; other algorithms are OPTIONAL.

   The keyspace identifier associates the signature with a method for
   verifying signatures.  This facility is used to support signatures on
   assertions from external sources (the extrakey object type).  At
   present, one keyspace identifier is defined, and support for it is
   REQUIRED.

    +-------------+-------+------------------------------------------+
    | Keyspace ID | Name  | Signature Verification Algorithm         |
    +-------------+-------+------------------------------------------+
    |           0 | rains | RAINS delegation chain; see Section 7.17 |
    +-------------+-------+------------------------------------------+

   Within the RAINS delegation chain keyspace, the key phase is an
   unbounded, unsigned integer matching a signature's key phase to the
   delegation key phase.  Multiple keys may be valid for a delegation at
   a given point in time, in order to support seamless rollover of keys,
   but only one per key phase and algorithm may be valid at once.  The
   third element of delegation objects and signatures is the key phase.

   Valid-since and valid-until timestamps are represented as CBOR
   integers counting seconds since the UNIX epoch UTC, identified with
   tag value 1 and encoded as in section 2.4.1 of [RFC7049].  A
   signature MUST have a valid-until timestamp.  If a signature has no
   specified valid-since time (i.e., is valid from the beginning of time
   until its valid-until timestamp), the valid-since time MAY be null
   (as in Table 2 in Section 2.3 of [RFC7049]).



Trammell & Fehlmann       Expires April 4, 2019                [Page 50]

Internet-Draft                    RAINS                     October 2018


   A signature in RAINS is generated over a byte stream representing the
   message in a canonical signing format.  The signing process is
   defined as follows:

   o  Parse the object to be signed into a byte stream according to the
      format specified in Section 8.

   o  Generate a signature on the resulting byte stream according to the
      algorithm selected.

   o  Add the full signature to the signatures array at the appropriate
      point in the object.

   To verify a signature, generate the byte stream as for signing, then
   verify the signature according to the algorithm selected.

7.17.1.  EdDSA signature and public key format

   EdDSA public keys consist of a single value, a 32-byte bit string
   generated as in Section 5.1.5 of [RFC8032] for Ed25519, and a 57-byte
   bit string generated as in Section 5.2.5 of [RFC8032] for Ed448.  The
   fourth element in a RAINS delegation object is this bit string
   encoded as a CBOR byte array.  RAINS delegation objects for Ed25519
   keys with value k are therefore represented by the array [5, 1,
   phase, k]; and for Ed448 keys as [5, 2, phase, k].

   Ed25519 and Ed448 signatures are are a combination of two non-
   negative integers, called "R" and "S" in sections 5.1.6 and 5.2.6,
   respectively, of [RFC8032].  An Ed25519 signature is represented as a
   64-byte array containing the concatenation of R and S, and an Ed448
   signature is represented as a 114-byte array containing the
   concatenation of R and S.  RAINS signatures using Ed25519 are
   therefore the array [1, 0, phase, valid-since, valid-until, R|S];
   using Ed448 the array [2, 0, phase, valid-since, valid-until, R|S].

   Ed25519 keys are generated as in Section 5.1.5 of [RFC8032], and
   Ed448 keys as in Section 5.2.5 of [RFC8032].  Ed25519 signatures are
   generated from a normalized serialized CBOR object as in
   Section 5.1.6 of [RFC8032], and Ed448 signatures as in section 5.2.6
   of [RFC8032].

   RAINS Server and Client implementations MUST support Ed25519
   signatures for delegation.








Trammell & Fehlmann       Expires April 4, 2019                [Page 51]

Internet-Draft                    RAINS                     October 2018


7.17.2.  ECDSA signature and public key format

   ECDSA public keys consist of a single value, called "Q" in
   [FIPS-186-3].  Q is a simple bit string that represents the
   uncompressed form of a curve point, concatenated together as "x | y".
   The fourth element in a RAINS delegation object is the Q bit string
   encoded as a CBOR byte array.  RAINS delegation objects for ECDSA-256
   public keys are therefore represented as the array [5, 3, phase, Q];
   and for ECDSA-384 public keys as [5, 4, phase, Q].

   ECDSA signatures are a combination of two non-negative integers,
   called "r" and "s" in [FIPS-186-3].  A Signature using ECDSA is
   represented using a four-element CBOR array, with the fourth element
   being "r | s" such that r is represented as a byte array as described
   in Section C.2 of [FIPS-186-3], and s represented as a byte array as
   described in Section C.2 of [FIPS-186-3].  For ECDSA-256 signatures,
   each integer MUST be represented as a 32-byte array.  For ECDSA-384
   signatures, each integer MUST be represented as a 48-byte array.
   RAINS signatures using ECDSA-256 are therefore the array [3, 0,
   phase, valid-since, valid-until, r|s]; and for ECDSA-384 the array
   [4, 0, phase, valid-since, valid-until, r|s].

   ECDSA-256 signatures and public keys use the P-256 curve as defined
   in [FIPS-186-3].  ECDSA-384 signatures and public keys use the P-384
   curve as defined in [FIPS-186-3].

   ECDSA-256 and ECDSA-384 support are primarily meant for compatibility
   with and migration from existing DNSSEC deployments; see
   Section 12.6.

7.18.  Capabilities

   When a RAINS server or client sends the first message in a stream to
   a peer, it MUST expose its configured capabilities to its peer using
   the capabilities (1) key.  This key contains either:

   o  an array of uniform resource names specifying capabilities
      supported by the sending server, taken from the table below, with
      each name encoded as a UTF-8 string.

   o  a SHA-256 hash of the CBOR byte stream derived from normalizing
      such an array by sorting it in lexicographically increasing order,
      then serializing it.

   This mechanism is inspired by [XEP0115], and is intended to be used
   to reduce the overhead in exposing common sets of capabilities.  Each
   RAINS server can cache a set of recently-seen or common hashes, and




Trammell & Fehlmann       Expires April 4, 2019                [Page 52]

Internet-Draft                    RAINS                     October 2018


   only request the full URN set (using notification code 399) on a
   cache miss.

   The following URNs are presently defined; other URNs will specify
   future optional features, support for alternate transport protocols
   and new signature algorithms, etc.

   +--------------------+----------------------------------------------+
   | URN                | Meaning                                      |
   +--------------------+----------------------------------------------+
   | urn:x-rains:tlssrv | Listens for connections on TLS over TCP from |
   |                    | other RAINS servers.                         |
   +--------------------+----------------------------------------------+

   Since there are only two defined capabilities at this time, RAINS
   servers can be implemented with two hard-coded hashes to determine
   whether a peer is listening or not.  The hash presented by a server
   supporting urn:x-rains:tlssrv is
   e5365a09be554ae55b855f15264dbc837b04f5831daeb321359e18cdabab5745; the
   hash presented by a client or a server supporting no capabilities
   (not listening) is
   76be8b528d0075f7aae98d6fa57a6d3c83ae480a8469e668d7b0af968995ac71.

   Servers MAY piggyback capability negotiation on other messages, or
   use dedicated messages for capability negotiation.

   A RAINS server MUST NOT assume that a peer server supports a given
   capability unless it has received a message containing that
   capability from that server.  An exception are the capabilities
   indicating that a server listens for connections using a given
   transport protocol; servers and clients can also learn this
   information from RAINS itself (given a redirection assertion for a
   named zone) or from external configuration values.

8.  Canonical signing format

   [EDITOR'S NOTE: to define, based on CBOR canonicalization, once this
   is implemented.]

9.  RAINS Protocol Definition

   As noted in Section 7, RAINS is a message-exchange protocol that uses
   CBOR [RFC7049] as its framing.  Since CBOR is self-framing - a CBOR
   parser can determine when a CBOR object is complete at the point at
   which it has read its final byte - RAINS requires no external
   framing.  It can therefore run over any streaming, multistreaming, or
   message-oriented transport protocol.  In order to protect query
   confidentiality, and support rapid deployment over a ubiquitously



Trammell & Fehlmann       Expires April 4, 2019                [Page 53]

Internet-Draft                    RAINS                     October 2018


   implemented transport, RAINS is defined in this document to run over
   persistent TLS 1.3 connections [RFC8446] over TCP [RFC0793] with
   mutual authentication between servers, and authentication of servers
   by clients.  The TLS certificates of RAINS server peers can be
   verified as specified in the cert-info assertions for those servers.

   RAINS servers MUST support this transport; future transports can be
   negotiated using the capabilities mechanism after bootstrapping using
   TLS 1.3.  As RAINS is an experimental protocol, RAINS servers listen
   on port 1022 [RFC4727] for connections from other RAINS servers and
   clients.  RAINS servers should strive to keep connections open to
   peer servers, unless it is clear that no future messages will be
   exchanged with those peers, or in the face of resource limitations at
   either peer.  If a RAINS server needs to send a message to another
   RAINS server to which it does not have an open connection, it
   attempts to open a connection with that server.

   This section describes the operation of the protocol as used among
   RAINS servers.  A simplified version of the protocol for client
   access is described in Section 10, and a simplified version of the
   protocol for publication by authorities is described in Section 11.

9.1.  Bootstrapping

   At startup, a server performing recursive lookup MUST have access to
   at least one of each of these three assertion types: a self-signed
   delegation assertion of the root zone, a redirection assertion
   containing the name of an authoritative root name server, and an ip4
   or ip6 assertion of the root name server mentioned in the redirection
   assertion.  These assertions must be obtained through a secure out of
   band mechanism.  For a caching server, it is sufficient to have a
   connection to a recursive resolver which does the lookup on its
   behalf.

   When a zone authority delegates a part of its namespace to a
   subordinate, it MUST sign and serve the assertions of the three above
   mentioned types.  This information is necessary for a recursive
   resolver to determine in a recursive lookup where to ask for a more
   specific answer and to validate the response.

9.2.  Allowed Inconsistencies

   For RAINS to work in a highly dynamic environment, some time-bounded
   inconsistencies are allowed to occur.  On the one hand, an authority
   wants to prove nonexistence of a name for a duration of time to make
   caching possible to reduce query latency and reduce load on its
   naming servers.  On the other hand, an authority wants to add the
   name of a new delegation as quickly as possible and also allow its



Trammell & Fehlmann       Expires April 4, 2019                [Page 54]

Internet-Draft                    RAINS                     October 2018


   customers to make changes available quickly.  Assuming an authority
   resigns sections every x seconds, then any inconcistency can occur at
   most x seconds.  At the point in time a section is signed, its
   content MUST represent the state of the zone at that point in time.
   The following actions result in allowed inconsistencies:

   o  Creation of a new assertion: Shards and P-Shards in range, and
      zones signed before this assertion was created and which are still
      valid, prove that this assertion is nonexistent, although it does
      now.

   o  Changed object value of an assertion: Shards in range and zones
      signed before this assertion was created and which are still
      valid, prove that this assertion is nonexistent, althoug it does
      now.

   o  Expiration of an assertion: Shards and P-Shards in range, and
      zones signed before this assertion has expired and which are still
      valid, prove that this assertion exists, although it does not
      anymore.

   o  Revocation of an assertion: Same inconsistencies as for expiration
      of an assertion with the addition, that the assertion itself might
      still be cached and served although it has been revoked.

   Two sections for proving nonexistence (shard, P-Shard or zone) which
   have an overlapping range and validity time where in between the
   signing of the two sections any of the above mentioned actions
   leading to inconsistencies happend, become inconsistent as well.  One
   of them has the old view, while the newer one has the updated view
   about the assertion.  Note that there is no inconsistency between a
   P-Shard and any other section proving nonexistence if only the object
   value of the assertion has changed (a P-Shard does not store this
   information).

   Note that most assertions are consistent between each other as the
   union of them is considered to be the valid state.  However, there
   are few exceptions mentioned in Section 9.6.

9.3.  Message processing

   Once a transport is established, any server may validly send a
   message with any content to any other server.  A client may send
   messages containing queries to servers, and a server may sent
   messages containing anything other than queries to clients.

   Upon receipt of a message, a server or client attempts to parse it.




Trammell & Fehlmann       Expires April 4, 2019                [Page 55]

Internet-Draft                    RAINS                     October 2018


   If the server or client cannot parse the message at all, it returns a
   400 Bad Message notification to the peer.  This notification may have
   a null token if the token cannot be retrieved from the message.

   If the server or client can parse the message, it:

   o  notes the token on the message.  This token MUST be present on any
      messages sent in reply to this message.

   o  processes any capabilities present, replacing the set of
      capabilities known for the peer with the set present in the
      message.  If the present capabilities are represented by a hash
      that the server does not have in its cache, it prepares a
      notification of type 399 "Capability hash not understood" to send
      to its peer.

   o  splits the contents into its constituent message sections, and
      verifies that each is acceptable.  Specifically, queries are not
      accepted by clients (see Section 10), and 404 No Assertion Exists
      notifications are not accepted by servers.  If a message contains
      an unacceptable section, the server or client returns a 400 Bad
      Message notification to its peer, and ceases processing of the
      message.

   On receipt of an assertion, shard, P-Shard, or zone message section,
   a server:

   o  verifies its consistency (see Section 9.6).  If the section is not
      consistent, it prepares to send a notification of type 403
      Inconsistent Message to the peer, and discards the section.
      Otherwise, it:

   o  determines whether it answers an outstanding query; if so, it
      prepares to forward the section to the server that issued the
      query.

   o  determines whether it is likely to answer a future query,
      according to its configuration, policy, and query history; if so,
      it caches the section.

   On receipt of an assertion, shard, P-Shard or zone message section, a
   client:

   o  determines whether it answers an outstanding query; if so, it
      considers the query answered.  It then:






Trammell & Fehlmann       Expires April 4, 2019                [Page 56]

Internet-Draft                    RAINS                     October 2018


   o  determines whether it is likely to answer a future query,
      according to its configuration, policy, and query history; if so,
      it caches the section.

   On receipt of a query, a server:

   1.  determines whether it has expired by checking the query-expires
       value.  If so, it drops the query silently.  If not, it:

   2.  determines whether it has at least one stored assertion answering
       the query.  If so, it returns the assertion(s) with the longest
       validUntil value that is already valid.  If not, it:

   3.  checks whether the query specifies option 1 and/or 9.  If so, it:

       *  determines whether the chosen option is in compliance with the
          server's configuration and policy.  If so, and:

          +  option 9 is set and option 1 is not, it continues with step
             4.

          +  option 1 is set, it checks whether it has a cached section
             to proof nonexistence.  If so:

             -  and option 9 is not set, it returns the section with the
                shortest size or the signature of the longest remaining
                validity to the peer that issued the query depending on
                the server's policy.  [EDITOR'S NOTE: Add a query option
                for this decision?]

             -  and option 9 is set, it might send a 211 notification
                back to the client, depending on the server's
                configuration.  Independent of the previous decision it
                then continues with step 4.  If not, the server
                overwrites the query's option according to its
                configuration and policy and processes it as above with
                the adapted option.  If not, it:

   4.  checks to see whether the query specifies option 4 (cached
       answers only).  If so, and if option 5 (expired assertions
       acceptable) is also specified, it then checks to see if it has
       any cached sections that answer the query on which signatures are
       expired; otherwise, processing stops, and the server returns a
       504 No Assertion Available notification, as if the query had
       instantly expired.  If the query does not specify option 4,
       delegation proceeds, and the server:





Trammell & Fehlmann       Expires April 4, 2019                [Page 57]

Internet-Draft                    RAINS                     October 2018


   5.  determines whether it has other non-authoritative servers it can
       forward the query to, according to its configuration and policy,
       and in compliance with any query options (see Section 7.8).  If
       so, it prepares to forward the query to those servers, noting the
       reply for the received query depends on the replies for the
       forwarded query.  If not, it:

   6.  determines the responsible authority servers for the zone
       containing the query name in the query for the context requested,
       and forwards the query to those authority servers, noting the
       reply for the received query depends on the reply for the
       forwarded query.

   If query delegation fails to return an answer within the maximum of
   the valid-until time in the received query and a configured maximum
   timeout for a delegated query, the server prepares to send a 504 No
   assertion available response to the peer from which it received the
   query.

   When a server creates a new query to forward to another server in
   response to a query it received, it SHOULD NOT use the same token on
   the delegated query as on the received query, unless option 6 Enable
   Tracing is present in the received, in which case it MUST use the
   same token.  The Enable Tracing option is designed to allow debugging
   of query processing across multiple servers, It SHOULD only be
   enabled by clients designed explicitly for debugging RAINS itself,
   and MUST NOT be enabled by default by client resolvers.

   When a server creates a new query to forward to another server in
   response to a query it received, and the received query contains a
   query-expires time, the delegated query MUST NOT have a query-expires
   time after that in the received query.  If the received query
   contains no query-expires time, the delegated query MAY contain a
   query- expires time of the server's choosing, according to its
   configuration.

   On receipt of an assertion update query, a server:

   o  determines whether it has expired by checking the query-expires
      value.  If so, it drops the query silently.  If not, it:

   o  determines whether it is the authoritative server of the queried
      name.  If so,

      *  it checks if the hashed assertion is still the assertion
         currently valid with the highest validUntil time for the given
         name, context, type and object value.  In that case it returns




Trammell & Fehlmann       Expires April 4, 2019                [Page 58]

Internet-Draft                    RAINS                     October 2018


         a 200 notification message which contains the hash value of the
         assertion.  If not, it:

      *  determines whether there is at least one assertion for the same
         name, type and object value which is already valid and its
         validUntil time is higher.  If so, the assertion with the
         highest validUntil value is returned.  If not:

      *  the assertion must have been revoked in the meantime and either
         a 210 notification message containing the hash value of the
         assertion or a section proofing nonexistence is returned.  If
         such a section exists it MUST be returned.  If not, it:

   o  determines whether it has other non-authoritative servers it can
      forward the query to, according to its configuration and policy.
      If so, it prepares to forward the query to those servers, noting
      the reply for the received query depends on the replies for the
      forwarded query.  If not, it:

   o  determines the responsible authority servers for the zone
      containing the query name and forwards the query to those
      authority servers, noting the reply for the received query depends
      on the reply for the forwarded query.

   If the server does not obtain an answer within the maximum of the
   valid-until time in the received query and a configured maximum
   timeout for an assertion update query, the server sends a 504 No
   assertion available response to the peer from which it received the
   query.

   When a server creates a new assertion update query to forward to
   another server in response to an assertion update query it received,
   it SHOULD NOT use the same token on the new query as on the received
   query, unless query option 6 Enable Tracing is present in the
   received query, in which case it MUST use the same token.  The Enable
   Tracing option is designed to allow debugging of query processing
   across multiple servers, It SHOULD only be enabled by clients
   designed explicitly for debugging RAINS itself, and MUST NOT be
   enabled by default by client resolvers.

   When a server creates a new assertion update query to forward to
   another server in response to an assertion update query it received,
   and the received query contains a query-expires time, the new query
   MUST NOT have a query-expires time after that in the received query.
   If the received query contains no query-expires time, the new query
   MAY contain a query- expires time of the server's choosing, according
   to its configuration.




Trammell & Fehlmann       Expires April 4, 2019                [Page 59]

Internet-Draft                    RAINS                     October 2018


   On receipt of an nonexistence update query, a server:

   o  determines whether it has expired by checking the query-expires
      value.  If so, it drops the query silently.  If not, it:

   o  determines whether it is the authoritative server of the queried
      name.  If so,

      *  it checks if it has a valid assertion for the queried context,
         subject-name and type.  In this case it returns the assertion.
         If not, it:

      *  determines whether it has an already valid zone, P-Shard, or
         shard in the range of the queried fully-qualified name, in a
         matching context, and with a higher validUntil value.  If so,
         the section with the highest validUntil value is returned.  If
         not, it:

      *  knows that the received shard, P-Shard, or zone is still the
         most recent one and a 200 notification message containing the
         hash value of the section is returned.  If not, it:

   o  determines whether it has other non-authoritative servers it can
      forward the query to, according to its configuration and policy.
      If so, it prepares to forward the query to those servers, noting
      the reply for the received query depends on the replies for the
      forwarded query.  If not, it:

   o  determines the responsible authority servers for the zone
      containing the query name and forwards the query to those
      authority servers, noting the reply for the received query depends
      on the reply for the forwarded query.

   If the server does not obtain an answer within the maximum of the
   valid-until time in the received query and a configured maximum
   timeout for an assertion update query, the server sends a 504 No
   assertion available response to the peer from which it received the
   query.

   When a server creates a new nonexistence update query to forward to
   another server in response to an nonexistence update query it
   received, it SHOULD NOT use the same token on the new query as on the
   received query, unless query option 6 Enable Tracing is present in
   the received query, in which case it MUST use the same token.  The
   Enable Tracing option is designed to allow debugging of query
   processing across multiple servers, It SHOULD only be enabled by
   clients designed explicitly for debugging RAINS itself, and MUST NOT
   be enabled by default by client resolvers.



Trammell & Fehlmann       Expires April 4, 2019                [Page 60]

Internet-Draft                    RAINS                     October 2018


   When a server creates a new nonexistence update query to forward to
   another server in response to an nonexistence update query it
   received, and the received query contains a query-expires time, the
   new query MUST NOT have a query-expires time after that in the
   received query.  If the received query contains no query-expires
   time, the new query MAY contain a query- expires time of the server's
   choosing, according to its configuration.

   On receipt of a notification, a server's behavior depends on the
   notification type:

   o  For type 100 "Connection Heartbeat", the server does nothing:
      these null messages are used to keep long-lived connections open
      in the presence of network behaviors that may drop state for idle
      connections.

   o  For type 399 "Capability hash not understood", the server prepares
      to send a full capabilities list on the next message it sends to
      the peer.

   o  For type 504 "No assertion available", the server checks the token
      on the message, and prepares to forward the assertion to the
      associated query.

   o  For type 413 "Message too large" the server notes that large
      messages may not be sent to a peer and tries again (see
      Section 9.5), or logs the error along with the note-data content.

   o  For type 400 "Bad message", type 403 "Inconsistent message", type
      500 "Server error", or type 501 "Server not capable", the server
      logs the error along with the note-data content, as these
      notifications generally represent implementation or configuration
      error conditions which will require human intervention to
      mitigate.

   On receipt of a notification, a client's behavior depends on the
   notification type:

   o  For type 100 "Connection Heartbeat", the client does nothing, as
      above.

   o  For type 399 "Capability hash not understood", the client prepares
      to send a full capabilities list on the next message it sends to
      the peer.

   o  For type 404 "No assertion exists", the client takes the query to
      be unanswerable.  It may reissue the query with query option 7 to




Trammell & Fehlmann       Expires April 4, 2019                [Page 61]

Internet-Draft                    RAINS                     October 2018


      do the verification of nonexistence again, if the server from
      which it received the notification is untrusted.

   o  For type 413 "Message too large" the client notes that large
      messages may not be sent to a peer and tries again (see
      Section 9.5), or logs the error along with the note-data content.

   o  For type 400 "Bad message", type 403 "Inconsistent message", type
      500 "Server error", or type 501 "Server not capable", the client
      logs the error along with the note-data content, as these
      notifications generally represent implementation or configuration
      error conditions which will require human intervention to
      mitigate.

   The first message a server or client sends to a peer after a new
   connection is established SHOULD contain a capabilities section, if
   the server or client supports any optional capabilities.  See
   Section 7.18.

   If the server is configured to keep long-running connections open,
   due to the presence of network behaviors that may drop state for idle
   connections, it SHOULD send a message containing a type 100
   Connection Heartbeat notification after a configured idle time
   without any messages containing other content being sent.

   In general, servers should follow the principles laid out in
   [I-D.iab-protocol-maintenance].  A malformed message section, or a
   message section with any invalid (but not expired) signature, should
   be dropped and log.  A malformed message section or invalid signature
   should not, however, result in other sections in the same message
   being dropped, except as explicitly noted above.

9.4.  Message Transmission

   As noted in Section 9.3 many messages are sent in reply to messages
   received from peers.  Servers may also originate messages on their
   own, based on their configuration and policy:

   o  Proactive queries to retrieve assertions, shards, and zones for
      which all signatures have expired or will soon expire, for cache
      management purposes.

   o  Proactive push of assertions, shards, and zones to other servers,
      based on query history or other information indicating those
      servers may query for the assertions they contain.






Trammell & Fehlmann       Expires April 4, 2019                [Page 62]

Internet-Draft                    RAINS                     October 2018


9.5.  Message Limits

   RAINS servers MUST accept messages up to 65536 bytes in length, but
   MAY accept messages of greater length, subject to resource
   limitations of the server.  A server with resource limitations MUST
   respond to a message rejected due to length restrictions with a
   notification of type 413 (Message Too Large).  A server that receives
   a type 413 notification must note that the peer sending the message
   only accepts messages smaller than the largest message it's
   successfully sent that peer, or cap messages to that peer to 65536
   bytes in length.

   Since a bare assertion with a single Ed25519 signature requires on
   the order of 180 bytes, it is clear that many full zones won't fit
   into a single minimum maximum-size message.  Authorities are
   therefore encouraged to publish zones grouped into shards that will
   fit into 65536-byte messages, to allow servers to reply using these
   shards when full-zone transfers are not possible due to message size
   limitations.

9.6.  Runtime Consistency Checking

   The data model used by the RAINS protocol allows inconsistent
   information to be asserted, all resulting from misconfigured or
   misbehaving authority servers.  The following types of inconsistency
   are possible:

   o  A shard omits an assertion within its range which is valid at the
      same time as the shard.

   o  A zone omits an assertion within its zone which is valid at the
      same time as the zone.

   o  An address assertion contains an object that is not allowed (see
      Section 7.11)

   o  An assertion prohibited by its zone's nameset is valid at the same
      time as the zone's nameset assertion.

   o  A zone contains a valid reflexive assertion of a given object type
      at the same time that its superordinate zone contains a valid
      assertion of the same type.

   o  Delegations to more than one key are simultaneously valid for a
      given context, zone, signature algorithm, and key phase.

   RAINS relies on runtime consistency checking to mitigate
   inconsistency: each server receiving an assertion, shard, or zone



Trammell & Fehlmann       Expires April 4, 2019                [Page 63]

Internet-Draft                    RAINS                     October 2018


   SHOULD, subject to resource constraints, ensure that it is consistent
   with other information it has, and if not, discard all inconsistent
   assertions, shards, and zones in its cache, log the error, and send a
   403 Inconsistent Message to the source of the message.

9.7.  Integrity and Confidentiality Protection

   Assertions are not valid unless they contain at least one signature
   that can be verified from the chain of authorities specified by the
   name and context on the assertion; integrity protection is built into
   the information model.  The infrastructure key object type allows
   keys to be associated with RAINS servers in addition to zone
   authorities, which allows a client to delegate integrity verification
   of assertions to a trusted query service (see Section 10).

   Since the job of an Internet naming service is to provide publicly-
   available information mapping names to information needed to connect
   to the services they name, confidentiality protection for assertions
   is not a goal of the system.  Specifically, the information model and
   the mechanism for proving nonexistence of an assertion is not
   designed to provide resistance against zone enumeration.

   On the other hand, confidentiality protection of query information is
   crucial.  Linking naming queries to a specific user can be nearly as
   useful to build a profile of that user for surveillance purposes as
   full access to the clear text of that client's communications
   [RFC7624].  In this revision, RAINS uses TLS to protect
   communications between servers and between servers and clients, with
   certificate information for RAINS infrastructure stored in RAINS
   itself.  Together with hop-by-hop confidentiality protection, query
   options, proactive caching, default use of non-persistent tokens, and
   redirection among servers can be used to mix queries and reduce the
   linkability of query information to specific clients.

9.8.  Cooperative Delegation Distribution

   Regardless of any other configuration directive, a RAINS server MUST
   be prepared to provide a full chain of delegation assertions from the
   appropriate delegation root to the signature on any assertion it
   gives to a peer or a client, whether as additional assertions on a
   message answering a query, or in reply to a subsequent query.  This
   property allows RAINS servers to maintain a full delegation tree.

10.  RAINS Client Protocol

   The protocol used by clients to issue queries to and receive
   responses from a query service is a subset of the full RAINS
   protocol, with the following differences:



Trammell & Fehlmann       Expires April 4, 2019                [Page 64]

Internet-Draft                    RAINS                     October 2018


   o  Clients only process assertion, shard, zone, and notification
      sections; sending a query to a client results in a 400 Bad Message
      notification.

   o  Clients never listen for connections; a client must initiate and
      maintain a transport session to the query server(s) it uses for
      name resolution.

   o  Servers only process query and notification sections when
      connected to clients; a client sending assertions to a server
      results in a 400 Bad Message notification.

   Since signature verification is resource-intensive, clients delegate
   signature verification to query servers by default.  The query server
   signs the message containing results for a query using its own key
   (published as an infrakey object associated with the query server's
   name), and a validity time corresponding to the signature it verified
   with the longest lifetime, stripping other signatures from the reply.
   This behavior can be disabled by a client by specifying query option
   7, allowing the client to do its own verification.

11.  RAINS Publication Protocol

   The protocol used by authorities to publish assertions to an
   authority service is a subset of the full RAINS protocol, with the
   following differences:

   o  Servers only process assertion, shard, zone, and notification
      sections when connected to publishers; sending a query to a server
      via the publication procotol results in a 400 Bad Message
      notification.  Servers only process notifications for capability
      negotiation purposes (see Section 7.18).

   o  Publishers only process notification sections; sending a query or
      assertion to a publisher results in a 400 Bad Message
      notification.

12.  Deployment Considerations

   The following subsections discuss issues that must be considered in
   any deployment of RAINS at scale.

12.1.  Assertion Lifetime Management

   An assertion can contain multiple signatures, each with a different
   lifetime.  Signature lifetimes are equivalent to a time to live in
   the present DNS: authorities should compute a new signature for each




Trammell & Fehlmann       Expires April 4, 2019                [Page 65]

Internet-Draft                    RAINS                     October 2018


   validity period, and make these new signatures available when old
   ones are expiring.

   Since assertion lifetime management is based on a real-time clock
   expressed in UTC, RAINS servers MUST use a clock synchronization
   protocol such as NTP [RFC5905].

   RAINS servers MAY coalesce assertion lifetimes, e.g. using only the
   most recent valid-until time in their cache management.  This implies
   that an assertion with valid signatures in time intervals (T1, T2)
   and (T3, T4) such that T3 > T2 may be cached during the interval (T2,
   T3) as well.  Authorites MUST NOT rely on non-caching or non-
   availability of assertions during such intervals.

12.2.  Secret Key Management

   The secret keys associated with public keys for each RAINS server
   (via infrakey objects) must be available on that server, whether
   through a hardware or software security device, so they can sign
   messages on demand; this is particularly important for query servers.
   In addition, the secret keys associated with TLS certificates for
   each server (published via certinfo objects) must be available as
   well in order to establish TLS sessions.

   However, storing zone secret keys (associated via delegation objects)
   on RAINS servers would represent a more serious operational risk.  To
   keep this from being necessary, authority servers have an additional
   signer interface, from which they will accept and cache any
   assertion, shard, or zone for which they are authority servers until
   at least the end of validity of the last signature, provided the
   signature is verifiable.

12.3.  Public Key Management

   As signature lifetime is used to manage assertion lifetime, and key
   rotation strategies may be used both for revocation as well as
   operational flexibility purposes, RAINS presents a much more dynamic
   key management environment than that presented by DNSSEC.

12.3.1.  Key Phase and Key Rotation

   Each signature and public key in a RAINS message is associated with a
   key phase, allowing multiple keys to be valid for a given authority
   at any given time.  For example, given two key phases and a key
   validity interval of one day, a phase 0 key would be valid from 00:00
   on day 0 to 00:00 on day 1, and a phase 1 key valid from 12:00 on day
   0 to 12:00 on day 1.  When the phase 0 key expires, it would be




Trammell & Fehlmann       Expires April 4, 2019                [Page 66]

Internet-Draft                    RAINS                     October 2018


   replaced by a new phase 0 valid from 00:00 on day 1 to 00:00 on day
   2, and so on.

   Since the end time of the validity of a signature on an assertion is
   the maximum of the validity of the signatures on each of the
   delegations in the delegation chain from the root, key rotation
   avoids mass expiration of assertions, at the cost of requiring one
   valid signatures per key phase on at least all delegation assertions.
   Key rotation schedules are a matter of authority operational policy,
   but key validity intervals should be longer the closer in the
   delegation chain an assertion is to the root.

12.3.2.  Next Key Assertions

   Another problem this dyanmic envrionment raises is how a zone
   authority communicates to its superordinate that it would like to
   begin using a new public key to sign its assertions.

   This can be done out of band, using private APIs provided by the
   superordinate authority.  Through the nextkey object type, RAINS
   provides a way for a future public key to be shared with the
   superordinate authority (and all other queriers) in-band.  An
   authority that wishes to use a new key publishes a reflexive nextkey
   assertion (i.e., in its own zone, with subject @) with the new public
   key and a requested valid-since and valid-until time range.  The
   superordinate issues periodic queries for nextkey assertions from its
   subordinate zone, or the subordinate pushes these assertions to an
   intermediate service designated to receive them.  When the
   superordinate receives a nextkey, and it decides it wants to delegate
   to the new key, it creates and signs a delegation assertion.

   This process is not mandatory: the superordinate is free to ignore
   the request, or to use a different time range, depending on its
   policy and/or the status of its business relationship with the
   subordinate.  The subordinate can discover this, in turn, using its
   own RAINS queries, or through the delegation assertions being
   similarly pushed to a designated intermediate service.

12.4.  Unsigned Contained Assertions

   Although RAINS supports Shards and Zones containing unsigned
   assertions, protecting the integrity of those Assertions by the
   signature on the Shard or Zone, it is RECOMMENDED that authorities
   sign each Assertion, even those contained within a Shard or Zone, in
   order to minimize the size of positive answers to queries.






Trammell & Fehlmann       Expires April 4, 2019                [Page 67]

Internet-Draft                    RAINS                     October 2018


12.5.  Query Service Discovery

   A client that will not do its own verification must be able to
   discover the query server(s) it should trust for resolution.
   Integration with DHCP is left to a future revision of this document.

   In any case, clients MUST provide a configuration interface to allow
   a user to specify (by address or name) and/or constrain (by
   certificate property) a preferred/trusted query server.  This would
   allow client on an untrusted network to use an untrusted locally-
   available query server to discover a preferred query server (doing
   key verification on its own for bootstrapping), before connecting to
   that query server for normal name resolution.

12.6.  Transition using translation between RAINS and DNS information
       models

   Full adoption of RAINS would require changes to every client device
   (replacing DNS stub resolvers with RAINS clients) and name server on
   the Internet.  In addition, most client software would need to
   change, as well, to get the full benefits of explicit context in name
   resolution.  This is an unrealistic goal.

   RAINS servers can, however, coexist with Domain Name System servers
   and clients during an indefinite transition period.  RAINS assertions
   can be algorithmically translated into DNS answers, and RAINS queries
   can be algorithmically translated into DNS queries, by RAINS to DNS
   gateways, given the mostly compatible information models used by the
   two.

   While DNSSEC and RAINS keys for equivalent ciphersuites are
   compatible with each other, there is no equivalent to query option 7
   for gateways, since the RAINS signatures are generated over the RAINS
   byte stream for an assertion, not the DNS byte stream.  Therefore,
   RAINS to DNS gateways must provide verification services for DNS
   clients.  DNS over TLS [RFC7858] SHOULD be used between the DNS
   client and gateway to ensure confidentiality and integrity for
   queries and answers.

   Object type mappings are as follows:

   o  Objects of type name can (largely) be represented as CNAME RRs.

   o  Objects of type ip6-addr can be represented as AAAA RRs.

   o  Objects of type ip4-addr can be represented as A RRs.

   o  Objects of type redirection can be represented as NS RRs.



Trammell & Fehlmann       Expires April 4, 2019                [Page 68]

Internet-Draft                    RAINS                     October 2018


   o  Objects of type cert-info can be represented as TLSA RRs

   o  Objects of type service-info can be represented as SRV RRs.

   There are a few object types without mappings:

   o  Objects of type delegation can be represented as DS RRs, and
      signatures as RRSIG RRs, but since these keys are verified by the
      gateway, there is no need to represent this information to the
      client.

   o  Objects of type infrakey cannot be represented in DNS, but are
      irrelevant for DNS translation of RAINS messages, since DNS does
      not support server signing of responses.

   o  Objects of type registrar and registrant cannot be represented in
      DNS; clients can use WHOIS instead.  In addition, RRTYPEs could be
      added for them in the future if RAINS sees significant deployment
      with DNS as a front-end protocol.

   o  Objects of type nameset cannot be represented in DNS; the current
      equivalent are the IDNA parameters maintained by IANA (for the DNS
      root zone only) at https://www.iana.org/assignments/idna-tables-
      6.3.0/idna-tables-6.3.0.xhtml.

   When translating a DNS query from a client to a RAINS query for that
   client, client options can be set on a per-server, per-client, or
   per-query basis using some out of band configuration options.

   When translating a RAINS assertion to a DNS answer, the gateway can
   use the time to expiry for the verified signature as the TTL.

   There is no method for exposing context information in a DNS query or
   answer.  Therefore, queries and answers at a RAINS gateway are only
   supported for the global context ".".

13.  Experimental Design and Evaluation

   The protocol described in this document is intended primarily as a
   prototype for discussion, though the goal of the document is to
   specify RAINS completely enough to allow independent, interoperable
   implementation of clients an servers.  The massive inertia behind the
   deployment of the present domain name system makes full deployment as
   a replacement for DNS unlikely.  Despite this, there are some
   criteria by which the success of the RAINS experiment may be judged:

   First, deployment in simulated or closed networks, or in alternate
   Internet architectures such as SCION, allows implementation



Trammell & Fehlmann       Expires April 4, 2019                [Page 69]

Internet-Draft                    RAINS                     October 2018


   experience with the features of RAINS which DNS lacks (signatures as
   a first-order delegation primitive, support for explicit contexts,
   explicit tradeoffs in queries, runtime availability of registrar/
   registrant data, and nameset support), which in turn may inform the
   specification and deployment of these features on the present DNS.

   Second, deployment of RAINS "islands" in the present Internet
   alongside DNS on a per-domain basis would allow for comparison
   between operational and implementation complexity and efficiency and
   benefits derived from RAINS' features, as information for future
   development of the DNS protocol.

14.  IANA Considerations

   The present revision of this document has no actions for IANA.

   The authors have registered the CBOR tag 15309736 to identify RAINS
   messages in the CBOR tag registry at
   https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml.

   RAINS servers currently listen for connections from other servers on
   Port 1022.  Future revisions of this document may specify a different
   port, registered with IANA via Expert Review [RFC5226].

   The symbol table in this document in Section 7.1, the notification
   code table in Section 7.13, and the signature algorithm table in
   Section 7.17 may be candidates for IANA registries in future
   revisions of this document.

   The urn:x-rains namespace used by the RAINS capability mechanism in
   Section 7.18 may be a candidate for replacement with an IANA-
   registered namespace in a future revision of this document.

15.  Security Considerations

   This document specifies a new, experimental protocol for Internet
   name resolution, with mandatory integrity protection for assertions
   about names built into the information model, and confidentiality for
   query information protected on a hop-by-hop basis.  See especially
   Section 5.1.2, Section 9.7, Section 7.17, Section 7.14.1, and
   Section 12.2 for security-relevant details.

   With respect to the resistance of the protocol itself to various
   attacks, we consider a few potential attacks against RAINS servers
   and RAINS clients in the subsections below:






Trammell & Fehlmann       Expires April 4, 2019                [Page 70]

Internet-Draft                    RAINS                     October 2018


15.1.  Server state exhaustion

   [EDITOR'S NOTE: detail this attack: attacker can create domain, use
   long-validity queries to exhaust state at server. defense: server can
   consider shorter validity time than that requested, but not longer.
   attack: attacker can push garbage assertions proactively. defense:
   server doesn't accept assertions it's never seen a query for. how to
   handle an attacker that pushes assertions and queries? attack:
   attacker can push garbage delegations, exhausting delegation chain
   cache. defense: server doesn't accept sigs for domains it doesn't
   know about, but what about a domain with hundreds of valid
   delegations? in all cases, blacklisting both clients and domains
   seems like a good idea.]

15.2.  Query relay attacks

   [EDITOR'S NOTE: detail this attack: attacker can cause traffic
   overload at a targeted intermediate or authority service by crafting
   queries and sending them via multiple query services.  There is no
   amplification here, but a concentration, with indirection that makes
   tracing difficult.]

16.  Acknowledgments

   Thanks to Daniele Asoni, Laurent Chuat, Markus Deshon, Ted Hardie,
   Joe Hildebrand, Tobias Klausmann, Steve Matsumoto, Adrian Perrig,
   Raphael Reischuk, Wendy Seltzer, Andrew Sullivan, and Suzanne Woolf
   for the discussions leading to the design of this protocol, and the
   definition of an ideal naming service on which it is based.  Thanks
   especially to Stephen Shirley for detailed feedback.

17.  References

17.1.  Normative References

   [FIPS-186-3]
              NIST, ., "Digital Signature Standard FIPS 186-3", June
              2009.

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <https://www.rfc-editor.org/info/rfc793>.

   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,
              and E. Lear, "Address Allocation for Private Internets",
              BCP 5, RFC 1918, DOI 10.17487/RFC1918, February 1996,
              <https://www.rfc-editor.org/info/rfc1918>.




Trammell & Fehlmann       Expires April 4, 2019                [Page 71]

Internet-Draft                    RAINS                     October 2018


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, "A DNS RR for
              specifying the location of services (DNS SRV)", RFC 2782,
              DOI 10.17487/RFC2782, February 2000,
              <https://www.rfc-editor.org/info/rfc2782>.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
              2003, <https://www.rfc-editor.org/info/rfc3629>.

   [RFC4193]  Hinden, R. and B. Haberman, "Unique Local IPv6 Unicast
              Addresses", RFC 4193, DOI 10.17487/RFC4193, October 2005,
              <https://www.rfc-editor.org/info/rfc4193>.

   [RFC4727]  Fenner, B., "Experimental Values In IPv4, IPv6, ICMPv4,
              ICMPv6, UDP, and TCP Headers", RFC 4727,
              DOI 10.17487/RFC4727, November 2006,
              <https://www.rfc-editor.org/info/rfc4727>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <https://www.rfc-editor.org/info/rfc7049>.

   [RFC8032]  Josefsson, S. and I. Liusvaara, "Edwards-Curve Digital
              Signature Algorithm (EdDSA)", RFC 8032,
              DOI 10.17487/RFC8032, January 2017,
              <https://www.rfc-editor.org/info/rfc8032>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

17.2.  Informative References

   [BETTER-BLOOM-FILTER]
              Adam Kirsch, . and . Michael Mitzenmacher, "Building a
              Better Bloom Filter", May 2008.




Trammell & Fehlmann       Expires April 4, 2019                [Page 72]

Internet-Draft                    RAINS                     October 2018


   [I-D.iab-protocol-maintenance]
              Thomson, M., "The Harmful Consequences of the Robustness
              Principle", draft-iab-protocol-maintenance-00 (work in
              progress), May 2018.

   [I-D.ietf-dprive-dns-over-tls]
              Zi, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,
              and P. Hoffman, "Specification for DNS over TLS", draft-
              ietf-dprive-dns-over-tls-09 (work in progress), March
              2016.

   [I-D.ietf-dprive-dnsodtls]
              Reddy, T., Wing, D., and P. Patil, "Specification for DNS
              over Datagram Transport Layer Security (DTLS)", draft-
              ietf-dprive-dnsodtls-15 (work in progress), December 2016.

   [I-D.trammell-optional-security-not]
              Trammell, B., "Optional Security Is Not An Option", draft-
              trammell-optional-security-not-00 (work in progress),
              March 2018.

   [IAB-UNICODE7]
              IAB, ., "IAB Statement on Identifiers and Unicode 7.0.0",
              n.d., <https://www.iab.org/documents/
              correspondence-reports-documents/2015-2/
              iab-statement-on-identifiers-and-unicode-7-0-0/>.

   [LUCID]    Freytag, A. and A. Sullivan, "LUCID problem (slides, IETF
              92 LUCID BoF)", n.d.,
              <https://www.ietf.org/proceedings/92/slides/
              slides-92-lucid-0.pdf>.

   [PARSER-BUGS]
              Bratus, S., Patterson, M., and A. Shubina, "The Bugs We
              Have To Kill (USENIX login)", August 2015.

   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.
              Rose, "DNS Security Introduction and Requirements",
              RFC 4033, DOI 10.17487/RFC4033, March 2005,
              <https://www.rfc-editor.org/info/rfc4033>.

   [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing
              Architecture", RFC 4291, DOI 10.17487/RFC4291, February
              2006, <https://www.rfc-editor.org/info/rfc4291>.







Trammell & Fehlmann       Expires April 4, 2019                [Page 73]

Internet-Draft                    RAINS                     October 2018


   [RFC4632]  Fuller, V. and T. Li, "Classless Inter-domain Routing
              (CIDR): The Internet Address Assignment and Aggregation
              Plan", BCP 122, RFC 4632, DOI 10.17487/RFC4632, August
              2006, <https://www.rfc-editor.org/info/rfc4632>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <https://www.rfc-editor.org/info/rfc5226>.

   [RFC5730]  Hollenbeck, S., "Extensible Provisioning Protocol (EPP)",
              STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009,
              <https://www.rfc-editor.org/info/rfc5730>.

   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,
              "Network Time Protocol Version 4: Protocol and Algorithms
              Specification", RFC 5905, DOI 10.17487/RFC5905, June 2010,
              <https://www.rfc-editor.org/info/rfc5905>.

   [RFC6698]  Hoffman, P. and J. Schlyter, "The DNS-Based Authentication
              of Named Entities (DANE) Transport Layer Security (TLS)
              Protocol: TLSA", RFC 6698, DOI 10.17487/RFC6698, August
              2012, <https://www.rfc-editor.org/info/rfc6698>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/info/rfc7231>.

   [RFC7624]  Barnes, R., Schneier, B., Jennings, C., Hardie, T.,
              Trammell, B., Huitema, C., and D. Borkmann,
              "Confidentiality in the Face of Pervasive Surveillance: A
              Threat Model and Problem Statement", RFC 7624,
              DOI 10.17487/RFC7624, August 2015,
              <https://www.rfc-editor.org/info/rfc7624>.

   [RFC7696]  Housley, R., "Guidelines for Cryptographic Algorithm
              Agility and Selecting Mandatory-to-Implement Algorithms",
              BCP 201, RFC 7696, DOI 10.17487/RFC7696, November 2015,
              <https://www.rfc-editor.org/info/rfc7696>.

   [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,
              and P. Hoffman, "Specification for DNS over Transport
              Layer Security (TLS)", RFC 7858, DOI 10.17487/RFC7858, May
              2016, <https://www.rfc-editor.org/info/rfc7858>.






Trammell & Fehlmann       Expires April 4, 2019                [Page 74]

Internet-Draft                    RAINS                     October 2018


   [RFC7871]  Contavalli, C., van der Gaast, W., Lawrence, D., and W.
              Kumari, "Client Subnet in DNS Queries", RFC 7871,
              DOI 10.17487/RFC7871, May 2016,
              <https://www.rfc-editor.org/info/rfc7871>.

   [RFC8094]  Reddy, T., Wing, D., and P. Patil, "DNS over Datagram
              Transport Layer Security (DTLS)", RFC 8094,
              DOI 10.17487/RFC8094, February 2017,
              <https://www.rfc-editor.org/info/rfc8094>.

   [SCION]    Barrera, D., Reischuk, R., Szalachowski, P., and A.
              Perrig, "SCION Five Years Later - Revisiting Scalability,
              Control, and Isolation Next-Generation Networks
              (arXiv:1508.01651v1)", August 2015.

   [XEP0115]  Hildebrand, J., Saint-Andre, P., Troncon, R., and J.
              Konieczny, "XEP-0115 Entity Capababilities", February
              2008.

Authors' Addresses

   Brian Trammell
   ETH Zurich
   Universitaetstrasse 6
   Zurich  8092
   Switzerland

   Email: ietf@trammell.ch


   Christian Fehlmann
   ETH Zurich

   Email: fehlmannch@gmail.com

















Trammell & Fehlmann       Expires April 4, 2019                [Page 75]
