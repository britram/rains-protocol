



Names and Identifiers Program                                B. Trammell
Internet-Draft                                         ETH Zurich NetSec
Intended status: Experimental                            August 16, 2016
Expires: February 17, 2017


     RAINS (Another Internet Naming Service) Protocol Specification
                     draft-trammell-rains-protocol

Abstract

   This document defines an alternate protocol for Internet name
   resolution, designed as a prototype to facilitate conversation about
   the evolution or replacement of the Domain Name System protocol.  It
   attempts to answer the question: "how would we design the DNS knowing
   what we do now, with current computing power at our disposal," on the
   background of the properties of an ideal naming service described in
   [I-D.trammell-inip-pins].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 17, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of



Trammell                Expires February 17, 2017               [Page 1]

Internet-Draft                    RAINS                      August 2016


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Architecture  . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Information Model . . . . . . . . . . . . . . . . . . . . . .   4
     4.1.  Assertion . . . . . . . . . . . . . . . . . . . . . . . .   4
       4.1.1.  Context in Assertions . . . . . . . . . . . . . . . .   5
       4.1.2.  Signatures in Assertions  . . . . . . . . . . . . . .   6
       4.1.3.  Shards and Zones  . . . . . . . . . . . . . . . . . .   7
     4.2.  Query . . . . . . . . . . . . . . . . . . . . . . . . . .   8
       4.2.1.  Context in Queries  . . . . . . . . . . . . . . . . .   9
     4.3.  Answer  . . . . . . . . . . . . . . . . . . . . . . . . .  10
   5.  Data Model  . . . . . . . . . . . . . . . . . . . . . . . . .  10
     5.1.  Symbol Table  . . . . . . . . . . . . . . . . . . . . . .  10
     5.2.  Message . . . . . . . . . . . . . . . . . . . . . . . . .  12
     5.3.  Message Section header  . . . . . . . . . . . . . . . . .  12
     5.4.  Assertion body  . . . . . . . . . . . . . . . . . . . . .  13
     5.5.  Shard body  . . . . . . . . . . . . . . . . . . . . . . .  14
     5.6.  Zone Message Section body . . . . . . . . . . . . . . . .  15
     5.7.  Query Message Section body  . . . . . . . . . . . . . . .  15
     5.8.  Notification Message Section body . . . . . . . . . . . .  17
     5.9.  Object  . . . . . . . . . . . . . . . . . . . . . . . . .  17
     5.10. Signatures and delegation keys  . . . . . . . . . . . . .  19
       5.10.1.  Hash-chain based revocation  . . . . . . . . . . . .  19
       5.10.2.  ECDSA signature and public key format  . . . . . . .  20
     5.11. Capabilities  . . . . . . . . . . . . . . . . . . . . . .  20
   6.  RAINS Protocol Definition . . . . . . . . . . . . . . . . . .  20
   7.  RAINS Client Protocol . . . . . . . . . . . . . . . . . . . .  20
   8.  Deployment Considerations . . . . . . . . . . . . . . . . . .  20
     8.1.  On Confidentiality and Integrity Protection . . . . . . .  20
     8.2.  Authority Signer Interface  . . . . . . . . . . . . . . .  20
     8.3.  Client Resolver Interfaces  . . . . . . . . . . . . . . .  20
     8.4.  Translation between RAINS and DNS . . . . . . . . . . . .  20
     8.5.  Rendering RAINS messages as JSON for debugging  . . . . .  21
   9.  Experimental Design and Evaluation  . . . . . . . . . . . . .  21
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  21
   11. Security Considerations . . . . . . . . . . . . . . . . . . .  21
   12. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  21
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  21
     13.1.  Normative References . . . . . . . . . . . . . . . . . .  21
     13.2.  Informative References . . . . . . . . . . . . . . . . .  22
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  22





Trammell                Expires February 17, 2017               [Page 2]

Internet-Draft                    RAINS                      August 2016


1.  Introduction

   TODO: what is this

   TODO: what is this not

   TODO: why does it exist

2.  Terminology

   TODO

   2119ify!

   o  assertion

   o  authority

   o  querier

   o  context

3.  Architecture

   The RAINS architecture is simple, and resembles the architecture of
   DNS.  A RAINS Server is an entity that provides transient and/or
   permanent storage for assertions about names, and a lookup function
   that finds assertions for a given query about a name, either by
   searching local storage or by delegating to another RAINS server.
   RAINS servers can take on any or all of three roles:

   o  authority service, acting on behalf of an authority to ensure
      properly signed assertions are made available to the system
      (equivalent to an authoritative server in DNS);

   o  query service, acting on behalf of a client to answer queries with
      relevant assertions (equivalent to a recursive resolver in DNS),
      and to validate assertions on the client's behalf; and/or

   o  intermediary service, acting on behalf of neither but providing
      storage and lookup for assertions with certain properties for
      query and authority servers (partially replacing, but not really
      equivalent to, caching resolvers in DNS).

   RAINS Servers use the RAINS Protocol defined in this document to
   exchange queries and assertions.  RAINS Clients use a subset variant
   of the RAINS Protocol (called the RAINS Client Protocol) to interact
   with RAINS Servers providing query services on their behalf.



Trammell                Expires February 17, 2017               [Page 3]

Internet-Draft                    RAINS                      August 2016


4.  Information Model

   Messages in the RAINS Protocol are made up of two kinds of elements:
   Assertion and Query.  A third type of element, Answer, binds a Query
   to a set of Assertions in response to a Query.

4.1.  Assertion

   An Assertion is a signed statement about a mapping from a subject
   name to an object value, and consists of the following elements:

   o  Context: name of the context in which the assertion is valid; see
      Section 4.1.1 below.

   o  Subject: name about which the assertion is made.

   o  Zone: name of the zone in which the assertion is made.  The fully
      qualified name of the subject is made by appending the zone name
      to the subject name with a domain name separator ('.').

   o  Type: the type of information about the Subject contained in the
      assertion.  Each Assertion is about a single type of data.

   o  Object: the data of the indicated type associated with the Subject

   o  Signatures: one or more signatures generated by the authority for
      the Assertion.  Signatures contain a time interval during which
      they are considered valid, and may contain a revocation token
      allowing them to be revoked before the end of the time interval.
      See Section 4.1.2 below.

   The Types supported for each assertion are:

   o  Delegation: the authority associated with the zone identified by
      the name (roughly equivalent to the DNSSEC DS RRTYPE).  The Object
      contains a public key by which the authority can be identified.

   o  Redirection: The name(s) of one or more a RAINS servers providing
      authority service for the authority associated with the zone
      (roughly equivalent to the DNSSEC NS RRTYPE, but not always
      consulted directly during resolution).  The Object contains a set
      of names.

   o  Address: one or more addresses associated with the name (replaces
      DNS A and AAAA RTYPEs).  The Object contains a set of Addresses.
      An Address is an {address-family, value} tuple.





Trammell                Expires February 17, 2017               [Page 4]

Internet-Draft                    RAINS                      August 2016


   o  Service-Info: one or more layer 4 ports and hostnames associated
      with a service name (replaces DNS SRV RRTYPE).  The object
      contains a {hostname, port-number, priority tuple}.

   o  Name: one or more names associated with the name (roughly
      equivalent to DNS CNAME).  The Object contains a set of names.

   o  Certificate: a certificate which must appear at a specified
      location in the certificate chain presented on a connection
      attempt with the named entity (roughly equivalent to DNS TLSA).
      The details of this type will be described in a separate document.

   o  Zone-Nameset: an expression of the set of names allowed within a
      zone; e.g.  Unicode scripts or codepages in which names in the
      zone may be issued.  This allows a zone to set policy on names in
      support of the distinguishability property in
      [I-D.trammell-inip-pins] that can be checked by authority and
      oracle servers at runtime.  An assertion about a Subject within a
      Zone whose name is not allowed by a valid signed Zone-Nameset
      expression is taken to be invalid, even if it has a valid
      signature.  The details of this type will be described in a
      separate document.

   For a given {subject, type} tuple, multiple assertions can be valid
   at a given point in time; the union of the object values of all of
   these assertions is considered to be the set of valid values at that
   point in time.

4.1.1.  Context in Assertions

   Assertion contexts are used to determine the validity of the
   signature by the declared authority as follows:

   o  The global context is identified by the special context name `.'.
      Assertions in the global context are signed by the authority for
      the subject name.  For example, assertions about the name
      simplon.inf.ethz.ch in the global context are only valid if signed
      by the relevant authority inf.ethz.ch.

   o  A local context is associated with a given authority.  The
      authority-part and the context-part of a local context name are
      divided by a context marker ('cx-').  The authority-part directly
      identifies the authority whose key was used to sign the assertion;
      assertions within a local context are only valid if signed by the
      identified authority.  Authorities have complete control over how
      the contexts under their namespaces are arranged, and over the
      names within those contexts.




Trammell                Expires February 17, 2017               [Page 5]

Internet-Draft                    RAINS                      August 2016


   Assertion context is the mechanism by which RAINS provides explicit
   inconsistency (see section 5.3.2 of [I-D.trammell-inip-pins]).  Some
   examples illustrate how context works:

   o  For the common split-DNS case, an enterprise could place names for
      machines on its local networks within a separate context.  E.g., a
      workstation could be named simplon.cab.inf.ethz.ch within the
      context staff-workstations.cx-.inf.ethz.ch.  Assertions about this
      name would be signed by the authority for inf.ethz.ch.  Here, the
      context serves simply as a marker, without enabling an alternate
      signature chain: note that the name simplon.cab.inf.ethz.ch can be
      validly signed by the authority for inf.ethz.ch if no delegation
      exists for cab.inf.ethz.ch. but simply marks this assertion as
      internal.  This allows a client making requests of local names to
      know they are local, and for local resolvers to manage visibility
      of assertions outside the enterprise: explicit context makes
      accidental leakage of both queries and assertions easier to detect
      and avoid.

   o  Contexts make captive-portal interactions more explicit: a captive
      portal resolver could respond to a query for a common website
      (e.g. www.google.ch) with a signed response directed at the
      captive portal, but within a context identifying the location as
      well as the ISP (e.g.  sihlquai.zurich.ch.cx-
      .starbucks.access.some-isp.net.).  This response will be signed by
      the authority for starbucks.access.some-isp.net.  This signature
      achieves two things: first, the client knows the result for
      www.google.ch is not globally valid; second, it can present the
      user with some indication as to the identity of the captive portal
      it is connected to.

   Further examples showing how context can be used in queries as well
   are given in Section 4.2.1 below.

   Developing conventions for assertion contexts for different
   situations will require implementation and deployment experience, and
   is a subject for future work.

4.1.2.  Signatures in Assertions

   A signature over an assertion contains the following information
   elements:

   o  Algorithm: identifier of the algorithm used to generate the
      signature.

   o  Valid-Since: a timestamp of the start of validity of this
      signature.



Trammell                Expires February 17, 2017               [Page 6]

Internet-Draft                    RAINS                      August 2016


   o  Valid-Until: a timestamp of the end of validity of this signature.

   o  Signature: the cryptographic signature itself, whose format is
      determined by the algorithm used.

   o  Revocation-Token: an optional revocation token for this signature,
      which allows a signature to be replaced or removed before the end
      of its validity.  Revocation tokens are generally based on hash
      chains, meaning that a signature with a revocation token "down"
      the chain from a given token supercedes it.  The format and
      mechanism used by the revocation token is determined by the
      alogrithm used.

   The signature protects all the information in an assertion as well as
   its own valid-since and valid-until values and the revocation token;
   it does not protect other signatures on the assertion.

4.1.3.  Shards and Zones

   Assertions may also be grouped and signed as a group.  A shard is a
   set of assertions subject to the same authority within the same
   context, protected by one or more signatures over all assertions
   within the shard.  A shard may have an additional property that given
   a subject and an authenticated shard, it can be shown that either an
   assertion with a given name and type exists within the shard or does
   not exist at all.

   A shard has the following information elements:

   o  Context: name of the context in which the assertions in the shard
      are valid; see Section 4.1.1 above.

   o  Zone: name of the zone in which the assertions are made.

   o  Content: a set of assertions sharing the context and zone.

   o  Signatures: one or more signatures generated by the authority for
      the shard; see Section 4.1.2.

   o  Complete-Flag: if true, the shard is lexicographically complete,
      and subject names that sort such that they would be within the
      shard if they existed, but are not in the shard, can be assumed
      not to exist.

   For efficiency's sake, information elements within a shard common to
   all assertions (zone, context, signature) within the shard may be
   omitted from the assertions themselves.




Trammell                Expires February 17, 2017               [Page 7]

Internet-Draft                    RAINS                      August 2016


   A zone is the entire set of shards subject to a given authority
   within a given context.  There are three kinds of zones; treating
   these zones differently may allow lookup protocol optimizations:

   o  Zones containing only delegation assertions are delegation-only
      zones.  Delegation-only zones are not relevant as part of an
      assertion lookup, other than for discovering and verifying
      authority.  Top-level domains are generally delegation-only.

   o  Zones containing no delegation assertions are final zones.  Final
      zones are not relevant as part of an authority discovery.

   o  Zones containing at least one delegation assertion and at least
      one assertion that is not a delegation assertion are mixed zones.
      No optimizations are available for mixed zones.

   A zone has the following information elements:

   o  Context: name of the context in which the assertions in the zone
      are valid; see Section 4.1.1 above.

   o  Zone: name of the zone.

   o  Content: a set of assertions and/or shards sharing the context and
      zone.

   o  Signatures: one or more signatures generated by the authority for
      the shard; see Section 4.1.2.

   o  Kind: delegation-only, final, or mixed; see above.

4.2.  Query

   A query is a request for a set of assertions supporting a conclusion
   about a given subject-object mapping.  It consists of the following
   information elements:

   o  Contexts: an expression of the context(s) in which assertions
      answering the query will be accepted; see Section 4.2.1 below.

   o  Qualified-Subject: the name about which the query is made.  The
      subject name in a query must be fully-qualified.

   o  Types: a set of assertion types the querier is interested in.

   o  Valid-Until: an optional client-generated timestamp for the query
      after which it expires and should not be answered.




Trammell                Expires February 17, 2017               [Page 8]

Internet-Draft                    RAINS                      August 2016


   o  Token: an optional client-generated token for the query, which can
      be used in the answer to refer to the query (instead of the answer
      containing the query itself).

   A query expresses interest about all the given types of assertion in
   all the specified contexts; more complex expressions of which types
   in which contexts must be asked using multiple queries.

   TODO: provide mechanisms for privacy/performance tradeoffs in
   queries; are infomodel changes required here?

4.2.1.  Context in Queries

   Contexts are used in queries as they are in assertions (see
   {{context-in- assertions}}).  Assertion contexts in an answer to a
   query have to match some context in the query in order to respond to
   a query.  However, there are a few additional considerations.  An
   assertion can only exist with a specific context, while queries may
   accept answers in multiple contexts.  The Contexts part of a query is
   a sequence of context specifiers taken to be in order of decreasing
   priority.  A special null context (represented by the empty string)
   indicates that assertions in any context will be accepted.  Any
   context in the Contexts part of a query may additionally be negated,
   in order to note that assertions in those contexts are not
   acceptable.  Negated context name appearing in the Contexts part of a
   query before the null context expresses "any context except these".

   Query contexts can also be used to provide additional information to
   RAINS servers about the query.  For example, contexts can provide a
   method for explicit selection of a CDN servers not based on either
   the client's or the resolver's address (see [RFC7871]).  Here, the
   CDN creates a context for each of its content zones, and an external
   service selects appropriate contexts for the client based not just on
   client source address but passive and active measurement of
   performance.  Queries for names at which content resides can then be
   made within these contexts, with the priority order of the contexts
   reflecting the goodness of the zone for the client.  Here, a context
   might be zrh.cx-.cdn-zones.some-cdn.com for names of servers hosting
   content in a CDN's Zurich data center, and a client could represent
   its desire to find content nearby by making queries in the zrh.cx-,
   fra.cx- (Frankfurt), and ams.cx- (Amsterdam) contexts within cdn-
   zones .some-cdn.com.  In all cases, the assertions themselves will be
   signed by the authority for cdn-zones.some-cdn.com, accurately
   representing that it is the CDN, not the owner of the related name in
   the global context, that is making the assertion.






Trammell                Expires February 17, 2017               [Page 9]

Internet-Draft                    RAINS                      August 2016


   As with assertion contexts, developing conventions for query contexts
   for different situations will require implementation and deployment
   experience, and is a subject for future work.

4.3.  Answer

   An answer consists of a set of assertions, shards, and/or zones which
   respond to a query, bound to that query.  It consists of the
   following information elements:

   o  Query: the query this answer applies to.  If the query was issued
      with a token, the query in the answer may omit all content except
      the token.

   o  Content: a set of assertions and/or shards answering the query.

   The content of an answer content depends on whether the answer is
   positive or negative.  A positive answer contains the information
   requested in the smallest atomic container that can be found, usually
   a single assertion.  A negative answer contains the information used
   to verify it; either a shard with the Complete-Flag set, an entire
   Zone, or a Zone-Nameset assertion showing the name is illegal within
   the zone.

   A query is taken to have an inconclusive answer when no answer
   returns to the querier before the query's Valid-Until time.

5.  Data Model

   The RAINS data model is a relatively straightforward mapping of the
   information model in Section 4 to the Concise Binary Object
   Representation (CBOR) [RFC7049], with an outer message type providing
   a mechanism for future capabilities-based versioning and recognition
   of a message as a RAINS message.

5.1.  Symbol Table

   Each CBOR object in a RAINS message is implemented as maps of integer
   keys to values, or arrays whose first value is integer-encoded type
   information, which implements a good tradeoff between efficiency of
   representation and flexibility.  The meaning of each of these integer
   keys is given in the symbol table below:

   +------+--------------+---------------------------------------------+
   | Code | Name         | Description                                 |
   +------+--------------+---------------------------------------------+
   |    0 | content      | Key: Content of a message, shard, or zone   |
   |      |              |                                             |



Trammell                Expires February 17, 2017              [Page 10]

Internet-Draft                    RAINS                      August 2016


   |    1 | capabilities | Key: Capabilities of server sending message |
   |      |              |                                             |
   |    2 | signatures   | Key: Signatures on a message or section     |
   |      |              |                                             |
   |    3 | subject-name | Key: Subject name in an assertion           |
   |      |              |                                             |
   |    4 | subject-zone | Key: Zone name in an assertion              |
   |      |              |                                             |
   |    5 | query-name   | Key: Qualified subject name in a query      |
   |      |              |                                             |
   |    6 | context      | Key: Context(s) of an assertion or query    |
   |      |              |                                             |
   |    7 | objects      | Key: Objects of an assertion                |
   |      |              |                                             |
   |    8 | token        | Key: Token for referring to a data item     |
   |      |              |                                             |
   |    9 | assertion    | Section type: Assertion                     |
   |      |              |                                             |
   |   10 | shard        | Section type: Shard                         |
   |      |              |                                             |
   |   11 | shard-range  | Key: Lexical range of Assertions in Shard   |
   |      |              |                                             |
   |   12 | zone         | Section type: Zone                          |
   |      |              |                                             |
   |   13 | query        | Section type: Query                         |
   |      |              |                                             |
   |   14 | query-types  | Key: acceptable object types for query      |
   |      |              |                                             |
   |   15 | reserved     | Reserved for future use in RAINS            |
   |      |              |                                             |
   |   16 | reserved     | Reserved for future use in RAINS            |
   |      |              |                                             |
   |   17 | note-type    | Key: Notification type                      |
   |      |              |                                             |
   |   18 | notification | Section type: Notification                  |
   |      |              |                                             |
   |   19 | name         | Object type: name associated with subject   |
   |      |              |                                             |
   |   20 | reserved     | Reserved for future use in RAINS            |
   |      |              |                                             |
   |   21 | ip6-addr     | Object type: IPv6 address of subject        |
   |      |              |                                             |
   |   22 | redirection  | Object type: name of zone authority server  |
   |      |              |                                             |
   |   23 | delegation   | Object type: public key for zone delgation  |
   |      |              |                                             |
   |   24 | ip4-addr     | Object type: IPv4 address of subject        |
   |      |              |                                             |



Trammell                Expires February 17, 2017              [Page 11]

Internet-Draft                    RAINS                      August 2016


   |   25 | reserved     | Reserved for future use in RAINS            |
   |      |              |                                             |
   |   26 | nameset      | Object type: name set expression for zone   |
   |      |              |                                             |
   |   27 | cert-info    | Object type: certificate information for    |
   |      |              | name                                        |
   |      |              |                                             |
   |   28 | service-info | Object type: service information for        |
   |      |              | srvname                                     |
   |      |              |                                             |
   |   29 | query-opts   | Key: set of query options requested         |
   |      |              |                                             |
   |   30 | note-data    | Key: additional notification data           |
   +------+--------------+---------------------------------------------+

5.2.  Message

   All interactions in RAINS take place in an outer envelope called a
   Message, which is a CBOR map tagged with the RAINS Message tag (hex
   0xE99BA8, decimal 15309736).

   A Message map MUST contain a content (0) key, whose value is an array
   of Message Sections; a Message Section is either an Assertion, Shard,
   Zone, or Query.

   A Message map MAY contain a capabilities (1) key, whose value is
   described in {#cbor-capabilities}.

   A Message map MAY contain a signatures (2) key, whose value is an
   array of Signatures as defined in Section 5.10.

   A Message map MAY contain a token (8) key, whose value is either an
   integer or a UTF-8 string of maximum byte length 32.  The token key
   may be used to refer to the message in future messages, or may refer
   to a past message or query by token.

5.3.  Message Section header

   Each Message Section in the Message's content value MUST be a two-
   element array.  The first element in the array is the message section
   type, encoded as an integer as in Section 5.1.  The second element in
   the array is the message section body, defined as in Section 5.4,
   Section 5.5, Section 5.6, Section 5.7, or Section 5.8.

   Section types are as in the following table, taken from Section 5.1:






Trammell                Expires February 17, 2017              [Page 12]

Internet-Draft                    RAINS                      August 2016


           +------+--------------+----------------------------+
           | Code | Name         | Description                |
           +------+--------------+----------------------------+
           |    9 | assertion    | Section type: Assertion    |
           |      |              |                            |
           |   10 | shard        | Section type: Shard        |
           |      |              |                            |
           |   12 | zone         | Section type: Zone         |
           |      |              |                            |
           |   13 | query        | Section type: Query        |
           |      |              |                            |
           |   18 | notification | Section type: Notification |
           +------+--------------+----------------------------+

5.4.  Assertion body

   An Assertion body is a map.  The keys present in this map depend on
   whether the Assertion is contained in a Message Section or in a Shard
   or Zone.

   Assertions contained in Message Sections are "bare Assertions".
   Since they cannot inherit any values from their containers, they MUST
   contain the signatures (2), subject-name (3), subject-zone (4),
   context (6), and objects (7) keys.

   Assertions within a Shard or Zone are "contained Assertions", and can
   inherit values from their containers.  A contained Assertion MAY
   contain the signatures (2) key and MUST contain the subject-name (3)
   and objects (7) keys.  It MAY contain subject-zone (4) and context
   (6) keys, but in this case the values of these keys MUST be identical
   to the values in the containing Shard or Zone.

   The value of the signatures (2) key, if present, is an array of one
   or more Signatures as defined in Section 5.10.  If not present, the
   containing Shard or Zone MUST be signed.  Signatures on a contained
   Assertion are generated as if the inherited values are present in the
   Assertion, whether actually present or not.

   The value of the subject-name (3) key is a UTF-8 encoded [RFC3629]
   string containing the name of the subject of the assertion.  The
   subject name never contains the zone in which the subject name; the
   fully-qualified name is obtained by joining the subject-name to the
   subject-zone with a '.' character.  The subject-name must be valid
   according to the nameset expression for the zone, if any.

   The value of the subject-zone (4) key, if present, is a UTF-8 encoded
   string containing the name of the zone in which the assertion is




Trammell                Expires February 17, 2017              [Page 13]

Internet-Draft                    RAINS                      August 2016


   made.  If not present, the zone of the assertion is inherited from
   the containing Shard or Zone.

   The value of the context (6) key, if present, is a UTF-8 encoded
   string containing the name of the context in which the assertion is
   valid.  If not present, the context of the assertion is inherited
   from the containing Shard or Zone.

   The value of the objects (7) key is an array of objects, as defined
   in {{cbor- object}}.

5.5.  Shard body

   A Shard body is a map.  The keys present in the map depend on whether
   the Shard is contained in a Message Section or in a Zone.

   Shards contained in Message Sections are "bare Shards".  Since they
   cannot inherit any values from their contained Zone, they MUST
   contain the content (0), signatures (2), subject-zone (4), and
   context (6) keys.

   Shards within a Zone are "contained Shards", and can inherit values
   from their containing Zone.  A contained Shard MUST contain the
   content (0) key, and MAY contain the signatures (2) key and shard-
   range (11) keys.  It MAY contain subject-zone (4) and context (6)
   keys, but in this case the values of these keys MUST be identical to
   the values in the containing Zone.

   The value of the content (0) key is an array of Assertion bodies as
   defined in {#cbor-assertion}.

   The value of the signatures (2) key, if present, is an array of one
   or more Signatures as defined in Section 5.10.  If not present, the
   containing Zone MUST be signed.  Signatures on a contained Shard are
   generated as if the inherited values are present in the Shard,
   whether actually present or not.

   The value of the subject-zone (4) key, if present, is a UTF-8 encoded
   string containing the name of the zone in which the Assertions within
   the Shard is made.  If not present, the zone of the assertion is
   inherited from the containing Zone.

   The value of the context (6) key, if present, is a UTF-8 encoded
   string containing the name of the context in which the Assertions
   within the Shard are valid.  If not present, the context of the
   assertion is inherited from the containing Zone.





Trammell                Expires February 17, 2017              [Page 14]

Internet-Draft                    RAINS                      August 2016


   If the shard-range (11) key is present, the shard is
   lexicographically complete within the range described in its value: a
   mapping for a (subject- name, object-type) pair that should be
   between the two values given in the range but is not is asserted to
   not exist.  Lexicographic sorting is done on subject names by
   ordering Unicode codepoints in ascending order; ordering on object
   types is done via their code values in the symbol table in {{cbor-
   symtab}}.

   The shard-range value MUST be a four element array of (subject-name
   A, object- type A, subject-name B, object type B) where A does not
   necessarily need to sort before B, and the (subject-name, object-
   type) pairs need not exist in the shard.  The shard MUST NOT contain
   any assertions for subject-names outside the range.

   If the shard-range key is not present, the shard is not
   lexicographically complete and MUST NOT be used to make assertions
   about nonexistance.

5.6.  Zone Message Section body

   A Zone body is a map.  Zones MUST contain the content (0), signatures
   (2), subject-zone (4), and context (6) keys.

   The value of the content (0) key is an array of Shard bodies as
   defined in {#cbor-shard} and/or Assertion bodies as defined in
   {#cbor-assertion}.

   The value of the subject-zone (4) key is a UTF-8 encoded string
   containing the name of the Zone.

   The value of the context (6) key is a UTF-8 encoded string containing
   the name of the context for which the Zone is valid.

   TODO: determine if Zones MUST contain all the valid assertions within
   the Zone.  I think so.  This leads (as with inconsistent Shards) to
   the question of "what happens if not", and defending against
   malicious inconsistency.

5.7.  Query Message Section body

   A Query body is a map.  Queries MUST contain the query-name (5),
   context (6), and query-type (14) keys.  Queries MAY contain the
   token(8) key and the query- opts (30) key.

   The value of the query-name (5) key is a UTF-8 encoded string
   containing the fully qualified name that is the subject of the query




Trammell                Expires February 17, 2017              [Page 15]

Internet-Draft                    RAINS                      August 2016


   The value of the context (6) key is an allowable context expression,
   as an array of context names as UTF-8 encoded strings.  The allowable
   context expression is evaluated in-order, as follows:

   o  Context names appearing earlier in the expression are given
      priority over context names appearing later in the expression.

   o  A context name may be negated by prepending the context negation
      marker 'cx-0-.' to the context name; a negated context name means
      the named context is not acceptable in answers to this query.

   o  The special context name '.' refers to the global context.

   o  The special context name 'cx-any-' means 'any context is
      acceptable'.

   Some examples:

   o  ['cx-.inf.ethz.ch', 'cx-any-'] means that answers in the
      'cx-.inf.ethz.ch' context are preferred, but any context is
      acceptable;

   o  ['.', 'cx-.inf.ethz.ch'] means that only answers in the
      'cx-.inf.ethz.ch' or global contexts are acceptable, with the
      global context preferred;

   o  ['.', cx-0-.cx-.inf.ethz.ch', 'cx-any-'] means that answers in any
      context except 'cx-.inf.ethz.ch' are acceptable, with the global
      context preferred.

   An empty context array in a query is taken to be equivalent to an
   array containing only ['.', 'cx-any-']; i.e. any context acceptable,
   global context preferred.

   The value of the query-type (14) key is an array of integers encoding
   the type(s) of objects acceptable in answers to the query.  All
   values in the query-type array are treated at equal priority: [21,24]
   means the querier is equally interested in both IPv4 and IPv6
   addresses for the query-name.

   The value of the token (8) key, if present, is either an integer or a
   UTF-8 string of maximum byte length 32.  Future messages containing
   answers to this query may contain the token instead of the query
   itself.

   TODO: how do query options work?





Trammell                Expires February 17, 2017              [Page 16]

Internet-Draft                    RAINS                      August 2016


5.8.  Notification Message Section body

   Notification Message Sections contain information about the operation
   of the RAINS protocol itself.  A Notification Message Section body is
   a map which MUST contain the note-type (17) key and MAY contain the
   note-data (30) key.  The value of the note-type key is encoded as an
   integer as in the following table:

                 +------+-------------------------------+
                 | Code | Description                   |
                 +------+-------------------------------+
                 |  400 | Malformed message received    |
                 |      |                               |
                 |  403 | Inconsistent message received |
                 |      |                               |
                 |  404 | No assertion available        |
                 |      |                               |
                 |  500 | Unspecified server error      |
                 |      |                               |
                 |  501 | Server not capable            |
                 +------+-------------------------------+

   Note that the status codes are designed to be mnemonically similar to
   status codes for HTTP [RFC7231].  Details of the meaning of each
   status code are given in Section 6.

   The value of the note-data (30) key is a UTF-8 encoded string with
   additional information about the notification, intended to be
   displayed to an administrator to help debug the issue identified by
   the negotiation.

5.9.  Object

   Objects are encoded as arrays in CBOR, where the first element is the
   type of the object, encoded as an integer in the following table:
















Trammell                Expires February 17, 2017              [Page 17]

Internet-Draft                    RAINS                      August 2016


   +------+--------------+---------------------------------------------+
   | Code | Name         | Description                                 |
   +------+--------------+---------------------------------------------+
   |   19 | name         | Object type: name associated with subject   |
   |      |              |                                             |
   |   21 | ip6-addr     | Object type: IPv6 address of subject        |
   |      |              |                                             |
   |   22 | redirection  | Object type: name of zone authority server  |
   |      |              |                                             |
   |   23 | delegation   | Object type: public key for zone delgation  |
   |      |              |                                             |
   |   24 | ip4-addr     | Object type: IPv4 address of subject        |
   |      |              |                                             |
   |   26 | nameset      | Object type: name set expression for zone   |
   |      |              |                                             |
   |   27 | cert-info    | Object type: certificate information for    |
   |      |              | name                                        |
   |      |              |                                             |
   |   28 | service-info | Object type: service information for        |
   |      |              | srvname                                     |
   +------+--------------+---------------------------------------------+

   A name (19) object contains a name associated with a name as an
   alias.  It is represented as a two-element array.  The second element
   is a fully-qualified name as a UTF-8 encoded string.

   An ip6-addr (21) object contains an IPv6 address associated with a
   name.  It is represented as a two element array.  The second element
   is a byte array of length 16 containing an IPv6 address in network
   byte order.

   An ip4-addr (24) object contains an IPv4 address associated with a
   name.  It is represented as a two element array.  The second element
   is a byte array of length 4 containing an IPv4 address in network
   byte order.

   A redirection (22) object contains the fully-qualified name of a
   RAINS authority server for a named zone.  It is represented as a two-
   element array.  The second element is a fully-qualified name of an
   RAINS authority server as a UTF-8 encoded string.

   A delegation (23) object contains the public key used to generate
   signatures on assertions in a named zone, and by which a delegation
   of a name within a zone to a subordinate zone may be verified.  It is
   represented as an N-element array.  The second element is a signature
   algorithm identifier as in Section 5.10.  Additional elements are as
   defined in Section 5.10 for the given algorithm identifier.




Trammell                Expires February 17, 2017              [Page 18]

Internet-Draft                    RAINS                      August 2016


   A nameset (26) object contains an expression defining which names are
   allowed and which names are disallowed in a given zone.  It is
   represented as an N- element array, as defined in a future draft-
   trammell-rains-nameset.

   A cert-info (27) object contains an expression binding a certificate
   or certificate authority to a name, such that connections to the name
   must either use the bound certificate or a certificate signed by a
   bound authority.  It is represented as an N-element array, as defined
   in a future draft-trammell-rains-cert-info.

   A service-info (28) object gives information about a named service.
   Services are named as in [RFC2782].  It is represented as a four-
   element array.  The second element is a fully-qualified name of a
   host providing the named service as a UTF-8 string.  The third
   element is a transport port number as a positive integer in the range
   0-65535.  The fourth element is a priority as a positive integer,
   with lower numbers having higher priority.

5.10.  Signatures and delegation keys

   RAINS supports multiple signature algorithms and hash functions for
   signing assertions for cryptographic algorithm agility [RFC7696].  A
   RAINS signature algorithm identifier specifies the signature
   algorithm; a hash function for generating the HMAC; a method for
   generating and verifying revocation tokens in signatures; and the
   format of the encodings of the signature values in Assertions,
   Shards, Zones, and Messages, as well as of public key values in
   delegation objects.

   The following algorithms are supported:

    +------+------------+-----------+----------------+----------------+
    | Code | Signatures | Hash/HMAC | Revocation     | Formats        |
    +------+------------+-----------+----------------+----------------+
    |    2 | ecdsa-256  | sha-256   | Section 5.10.1 | Section 5.10.2 |
    |      |            |           |                |                |
    |    3 | ecdsa-384  | sha-384   | Section 5.10.1 | Section 5.10.2 |
    +------+------------+-----------+----------------+----------------+

   TODO: determine MTI.  Does everyone signing 384 also have to sign
   256?

5.10.1.  Hash-chain based revocation

   TODO: A revocation token can optionally be generated.  To replace an
   assertion, use the next revtoken backward...




Trammell                Expires February 17, 2017              [Page 19]

Internet-Draft                    RAINS                      August 2016


5.10.2.  ECDSA signature and public key format

   TODO: base this on [RFC6605], but use raw byte array encoding.

5.11.  Capabilities

   TODO: URNs naming server capabilities.

6.  RAINS Protocol Definition

   TODO: note CBOR is self-framing so we can use any transport we want.
   define TLS 1.3 with TFO for now, note nice fit atop QUIC.

   TODO: note further that signatures are prime in RAINS, so it really
   doesn't matter where servers exist.

7.  RAINS Client Protocol

   TODO: define as a subset of the full RAINS protocol, plus oracle
   signatures and tags in answers to allow oracles to verify proof of
   answer.  Preferences for privacy/latency tradeoffs might go here.

   TODO: add cx-link- and cx-site- link- and site-local contexts.

8.  Deployment Considerations

8.1.  On Confidentiality and Integrity Protection

   TODO: note that queries require more confidentiality than assertions.
   use TLS for hop-by-hop confidentiality for now. point out data
   confidentiality using COSE as a future next step.

8.2.  Authority Signer Interface

   TODO: need to define a way to keep authority servers from needing
   secret keys.

8.3.  Client Resolver Interfaces

   TODO: note we should add RAINS resolver information to DHCP. do we
   want a multicast address as well? do we need to add context
   information to DHCP?

8.4.  Translation between RAINS and DNS

   TODO: contexts are really hard to wedge into DNS.





Trammell                Expires February 17, 2017              [Page 20]

Internet-Draft                    RAINS                      August 2016


8.5.  Rendering RAINS messages as JSON for debugging

   TODO: note an algorithmic transform to replace keys with names.

9.  Experimental Design and Evaluation

   TODO: note that this is primarily a prototype for discussion, but
   that we do intend to implement it. how will we tell if something like
   RAINS is ready for standardization?

10.  IANA Considerations

   The present revision of this document

   The authors have registered the CBOR tag 15309736 to identify RAINS
   messages in the CBOR tag registry at
   https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml.

   The symbol table in this document in Section 5.1, the notification
   code table in Section 5.8, and the

11.  Security Considerations

   TODO: point at Section 4.1.2, {{on-confidentiality-and- integrity-
   protection}}, and Section 8.2.  Note that shards for proving non-
   existence of a name are equivalent to NSEC, and that there is
   explicitly no resistance against zone enumeration.

12.  Acknowledgments

   Thanks to Daniele Asoni, Laurent Chuat, Ted Hardie, Joe Hildebrand,
   Steve Matsumoto, Adrian Perrig, Raphael Reischuk, Stephen Shirley,
   Andrew Sullivan, and Suzanne Woolf for the discussions leading to the
   design of this protocol.

13.  References

13.1.  Normative References

   [I-D.trammell-inip-pins]
              Trammell, B., "Properties of an Ideal Naming Service",
              draft-trammell-inip-pins-01 (work in progress), March
              2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.



Trammell                Expires February 17, 2017              [Page 21]

Internet-Draft                    RAINS                      August 2016


   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, "A DNS RR for
              specifying the location of services (DNS SRV)", RFC 2782,
              DOI 10.17487/RFC2782, February 2000,
              <http://www.rfc-editor.org/info/rfc2782>.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
              2003, <http://www.rfc-editor.org/info/rfc3629>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <http://www.rfc-editor.org/info/rfc7049>.

13.2.  Informative References

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <http://www.rfc-editor.org/info/rfc1035>.

   [RFC6605]  Hoffman, P. and W. Wijngaards, "Elliptic Curve Digital
              Signature Algorithm (DSA) for DNSSEC", RFC 6605,
              DOI 10.17487/RFC6605, April 2012,
              <http://www.rfc-editor.org/info/rfc6605>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

   [RFC7696]  Housley, R., "Guidelines for Cryptographic Algorithm
              Agility and Selecting Mandatory-to-Implement Algorithms",
              BCP 201, RFC 7696, DOI 10.17487/RFC7696, November 2015,
              <http://www.rfc-editor.org/info/rfc7696>.

   [RFC7871]  Contavalli, C., van der Gaast, W., Lawrence, D., and W.
              Kumari, "Client Subnet in DNS Queries", RFC 7871,
              DOI 10.17487/RFC7871, May 2016,
              <http://www.rfc-editor.org/info/rfc7871>.

Author's Address

   Brian Trammell
   ETH Zurich NetSec
   Universitaetstrasse 6
   Zurich  8092
   Switzerland

   Email: ietf@trammell.ch



Trammell                Expires February 17, 2017              [Page 22]
